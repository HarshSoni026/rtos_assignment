
assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003490  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003620  08003620  00004620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003698  08003698  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003698  08003698  00004698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036a0  080036a0  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a0  080036a0  000046a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036a4  080036a4  000046a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080036a8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005060  2**0
                  CONTENTS
 10 .bss          000041a0  20000060  20000060  00005060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004200  20004200  00005060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f4a4  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002681  00000000  00000000  00014534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00016bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aea  00000000  00000000  000179f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e34  00000000  00000000  000184da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f0ae  00000000  00000000  0003a30e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0cac  00000000  00000000  000493bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011a068  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d3c  00000000  00000000  0011a0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0011dde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003608 	.word	0x08003608

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08003608 	.word	0x08003608

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000007c 	.word	0x2000007c
 80004f0:	2000011c 	.word	0x2000011c

080004f4 <vLedTask>:
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
void vLedTask(void * param)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	uint16_t pvPIN = (uint16_t)param;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	81fb      	strh	r3, [r7, #14]
	portTickType wakeuptime = xTaskGetTickCount();
 8000500:	f002 f93c 	bl	800277c <xTaskGetTickCount>
 8000504:	4603      	mov	r3, r0
 8000506:	60bb      	str	r3, [r7, #8]
			while(1)
			{
				HAL_GPIO_TogglePin(GPIOD, pvPIN);
 8000508:	89fb      	ldrh	r3, [r7, #14]
 800050a:	4619      	mov	r1, r3
 800050c:	4805      	ldr	r0, [pc, #20]	@ (8000524 <vLedTask+0x30>)
 800050e:	f000 fd14 	bl	8000f3a <HAL_GPIO_TogglePin>
				vTaskDelayUntil(&wakeuptime, 1000 / portTICK_RATE_MS);
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800051a:	4618      	mov	r0, r3
 800051c:	f001 ff62 	bl	80023e4 <vTaskDelayUntil>
				HAL_GPIO_TogglePin(GPIOD, pvPIN);
 8000520:	bf00      	nop
 8000522:	e7f1      	b.n	8000508 <vLedTask+0x14>
 8000524:	40020c00 	.word	0x40020c00

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b5b0      	push	{r4, r5, r7, lr}
 800052a:	b08a      	sub	sp, #40	@ 0x28
 800052c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 fa2b 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f869 	bl	8000608 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
    ret = xTaskCreate(vLedTask, "pin12_task", configMINIMAL_STACK_SIZE, GPIO_PIN_12, 2, NULL);
 8000536:	2300      	movs	r3, #0
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2302      	movs	r3, #2
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000542:	2280      	movs	r2, #128	@ 0x80
 8000544:	4929      	ldr	r1, [pc, #164]	@ (80005ec <main+0xc4>)
 8000546:	482a      	ldr	r0, [pc, #168]	@ (80005f0 <main+0xc8>)
 8000548:	f001 fdfd 	bl	8002146 <xTaskCreate>
 800054c:	61f8      	str	r0, [r7, #28]
    if(ret != pdTRUE)
 800054e:	69fb      	ldr	r3, [r7, #28]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d001      	beq.n	8000558 <main+0x30>
  	  Error_Handler();
 8000554:	f000 f910 	bl	8000778 <Error_Handler>
    ret = xTaskCreate(vLedTask, "pin13_task", configMINIMAL_STACK_SIZE, GPIO_PIN_13, 2, NULL);
 8000558:	2300      	movs	r3, #0
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	2302      	movs	r3, #2
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000564:	2280      	movs	r2, #128	@ 0x80
 8000566:	4923      	ldr	r1, [pc, #140]	@ (80005f4 <main+0xcc>)
 8000568:	4821      	ldr	r0, [pc, #132]	@ (80005f0 <main+0xc8>)
 800056a:	f001 fdec 	bl	8002146 <xTaskCreate>
 800056e:	61f8      	str	r0, [r7, #28]
    if(ret != pdTRUE)
 8000570:	69fb      	ldr	r3, [r7, #28]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d001      	beq.n	800057a <main+0x52>
  	  Error_Handler();
 8000576:	f000 f8ff 	bl	8000778 <Error_Handler>
    ret = xTaskCreate(vLedTask, "pin14_task", configMINIMAL_STACK_SIZE, GPIO_PIN_14, 2, NULL);
 800057a:	2300      	movs	r3, #0
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2302      	movs	r3, #2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000586:	2280      	movs	r2, #128	@ 0x80
 8000588:	491b      	ldr	r1, [pc, #108]	@ (80005f8 <main+0xd0>)
 800058a:	4819      	ldr	r0, [pc, #100]	@ (80005f0 <main+0xc8>)
 800058c:	f001 fddb 	bl	8002146 <xTaskCreate>
 8000590:	61f8      	str	r0, [r7, #28]
    if(ret != pdTRUE)
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d001      	beq.n	800059c <main+0x74>
  	 Error_Handler();
 8000598:	f000 f8ee 	bl	8000778 <Error_Handler>
    ret = xTaskCreate(vLedTask, "pin15_task", configMINIMAL_STACK_SIZE, GPIO_PIN_15, 2, NULL);
 800059c:	2300      	movs	r3, #0
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	2302      	movs	r3, #2
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005a8:	2280      	movs	r2, #128	@ 0x80
 80005aa:	4914      	ldr	r1, [pc, #80]	@ (80005fc <main+0xd4>)
 80005ac:	4810      	ldr	r0, [pc, #64]	@ (80005f0 <main+0xc8>)
 80005ae:	f001 fdca 	bl	8002146 <xTaskCreate>
 80005b2:	61f8      	str	r0, [r7, #28]
    if(ret != pdTRUE)
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d001      	beq.n	80005be <main+0x96>
  	 Error_Handler();
 80005ba:	f000 f8dd 	bl	8000778 <Error_Handler>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f88d 	bl	80006dc <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <main+0xd8>)
 80005c4:	463c      	mov	r4, r7
 80005c6:	461d      	mov	r5, r3
 80005c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d4:	463b      	mov	r3, r7
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fc40 	bl	8001e5e <osThreadCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a08      	ldr	r2, [pc, #32]	@ (8000604 <main+0xdc>)
 80005e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e4:	f001 fc34 	bl	8001e50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0xc0>
 80005ec:	08003620 	.word	0x08003620
 80005f0:	080004f5 	.word	0x080004f5
 80005f4:	0800362c 	.word	0x0800362c
 80005f8:	08003638 	.word	0x08003638
 80005fc:	08003644 	.word	0x08003644
 8000600:	0800365c 	.word	0x0800365c
 8000604:	2000031c 	.word	0x2000031c

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	@ 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 ff1c 	bl	8003454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	@ (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800067c:	2332      	movs	r3, #50	@ 0x32
 800067e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fc6f 	bl	8000f70 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 f86e 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006a8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2101      	movs	r1, #1
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fed0 	bl	8001460 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c6:	f000 f857 	bl	8000778 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	@ 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_GPIO_Init+0x60>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f8:	4a10      	ldr	r2, [pc, #64]	@ (800073c <MX_GPIO_Init+0x60>)
 80006fa:	f043 0308 	orr.w	r3, r3, #8
 80006fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_GPIO_Init+0x60>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000704:	f003 0308 	and.w	r3, r3, #8
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000712:	480b      	ldr	r0, [pc, #44]	@ (8000740 <MX_GPIO_Init+0x64>)
 8000714:	f000 fbf8 	bl	8000f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000718:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800071c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_GPIO_Init+0x64>)
 8000730:	f000 fa4e 	bl	8000bd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000734:	bf00      	nop
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40020c00 	.word	0x40020c00

08000744 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f001 fbd2 	bl	8001ef6 <osDelay>
 8000752:	e7fb      	b.n	800074c <StartDefaultTask+0x8>

08000754 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a04      	ldr	r2, [pc, #16]	@ (8000774 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d101      	bne.n	800076a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000766:	f000 f931 	bl	80009cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40010000 	.word	0x40010000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <Error_Handler+0x8>

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <HAL_MspInit+0x54>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000792:	4a11      	ldr	r2, [pc, #68]	@ (80007d8 <HAL_MspInit+0x54>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000798:	6453      	str	r3, [r2, #68]	@ 0x44
 800079a:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <HAL_MspInit+0x54>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <HAL_MspInit+0x54>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <HAL_MspInit+0x54>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <HAL_MspInit+0x54>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	210f      	movs	r1, #15
 80007c6:	f06f 0001 	mvn.w	r0, #1
 80007ca:	f000 f9d7 	bl	8000b7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	@ 0x30
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	4b2f      	ldr	r3, [pc, #188]	@ (80008b0 <HAL_InitTick+0xd4>)
 80007f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f4:	4a2e      	ldr	r2, [pc, #184]	@ (80008b0 <HAL_InitTick+0xd4>)
 80007f6:	f043 0301 	orr.w	r3, r3, #1
 80007fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80007fc:	4b2c      	ldr	r3, [pc, #176]	@ (80008b0 <HAL_InitTick+0xd4>)
 80007fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000808:	f107 020c 	add.w	r2, r7, #12
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f001 f830 	bl	8001878 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000818:	f001 f81a 	bl	8001850 <HAL_RCC_GetPCLK2Freq>
 800081c:	4603      	mov	r3, r0
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000824:	4a23      	ldr	r2, [pc, #140]	@ (80008b4 <HAL_InitTick+0xd8>)
 8000826:	fba2 2303 	umull	r2, r3, r2, r3
 800082a:	0c9b      	lsrs	r3, r3, #18
 800082c:	3b01      	subs	r3, #1
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000830:	4b21      	ldr	r3, [pc, #132]	@ (80008b8 <HAL_InitTick+0xdc>)
 8000832:	4a22      	ldr	r2, [pc, #136]	@ (80008bc <HAL_InitTick+0xe0>)
 8000834:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000836:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <HAL_InitTick+0xdc>)
 8000838:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800083c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800083e:	4a1e      	ldr	r2, [pc, #120]	@ (80008b8 <HAL_InitTick+0xdc>)
 8000840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000842:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000844:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <HAL_InitTick+0xdc>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <HAL_InitTick+0xdc>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <HAL_InitTick+0xdc>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000856:	4818      	ldr	r0, [pc, #96]	@ (80008b8 <HAL_InitTick+0xdc>)
 8000858:	f001 f840 	bl	80018dc <HAL_TIM_Base_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000862:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000866:	2b00      	cmp	r3, #0
 8000868:	d11b      	bne.n	80008a2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800086a:	4813      	ldr	r0, [pc, #76]	@ (80008b8 <HAL_InitTick+0xdc>)
 800086c:	f001 f890 	bl	8001990 <HAL_TIM_Base_Start_IT>
 8000870:	4603      	mov	r3, r0
 8000872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000876:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800087a:	2b00      	cmp	r3, #0
 800087c:	d111      	bne.n	80008a2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800087e:	2019      	movs	r0, #25
 8000880:	f000 f998 	bl	8000bb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b0f      	cmp	r3, #15
 8000888:	d808      	bhi.n	800089c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800088a:	2200      	movs	r2, #0
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	2019      	movs	r0, #25
 8000890:	f000 f974 	bl	8000b7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000894:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <HAL_InitTick+0xe4>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6013      	str	r3, [r2, #0]
 800089a:	e002      	b.n	80008a2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3730      	adds	r7, #48	@ 0x30
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	431bde83 	.word	0x431bde83
 80008b8:	20000320 	.word	0x20000320
 80008bc:	40010000 	.word	0x40010000
 80008c0:	20000004 	.word	0x20000004

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <NMI_Handler+0x4>

080008cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <MemManage_Handler+0x4>

080008dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
	...

080008fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000900:	4802      	ldr	r0, [pc, #8]	@ (800090c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000902:	f001 f8b5 	bl	8001a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000320 	.word	0x20000320

08000910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	@ (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800096c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000938:	f7ff ffea 	bl	8000910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	@ (8000970 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	@ (8000974 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	@ (8000980 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000962:	f002 fdd5 	bl	8003510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000966:	f7ff fddf 	bl	8000528 <main>
  bx  lr    
 800096a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800096c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000978:	080036a8 	.word	0x080036a8
  ldr r2, =_sbss
 800097c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000980:	20004200 	.word	0x20004200

08000984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0d      	ldr	r2, [pc, #52]	@ (80009c8 <HAL_Init+0x40>)
 8000992:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <HAL_Init+0x40>)
 800099e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a07      	ldr	r2, [pc, #28]	@ (80009c8 <HAL_Init+0x40>)
 80009aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 f8d8 	bl	8000b66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	200f      	movs	r0, #15
 80009b8:	f7ff ff10 	bl	80007dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009bc:	f7ff fee2 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023c00 	.word	0x40023c00

080009cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <HAL_IncTick+0x20>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_IncTick+0x24>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <HAL_IncTick+0x24>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000368 	.word	0x20000368

080009f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;
 80009f8:	4b03      	ldr	r3, [pc, #12]	@ (8000a08 <HAL_GetTick+0x14>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000368 	.word	0x20000368

08000a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db0b      	blt.n	8000a9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f003 021f 	and.w	r2, r3, #31
 8000a88:	4907      	ldr	r1, [pc, #28]	@ (8000aa8 <__NVIC_EnableIRQ+0x38>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	095b      	lsrs	r3, r3, #5
 8000a90:	2001      	movs	r0, #1
 8000a92:	fa00 f202 	lsl.w	r2, r0, r2
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	@ (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	@ (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	@ 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
         );
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	@ 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff ff4c 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
 8000b88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b8e:	f7ff ff61 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000b92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	68b9      	ldr	r1, [r7, #8]
 8000b98:	6978      	ldr	r0, [r7, #20]
 8000b9a:	f7ff ffb1 	bl	8000b00 <NVIC_EncodePriority>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff80 	bl	8000aac <__NVIC_SetPriority>
}
 8000bac:	bf00      	nop
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff54 	bl	8000a70 <__NVIC_EnableIRQ>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	@ 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
 8000bea:	e16b      	b.n	8000ec4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bec:	2201      	movs	r2, #1
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	f040 815a 	bne.w	8000ebe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d005      	beq.n	8000c22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d130      	bne.n	8000c84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4013      	ands	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c58:	2201      	movs	r2, #1
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	091b      	lsrs	r3, r3, #4
 8000c6e:	f003 0201 	and.w	r2, r3, #1
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d017      	beq.n	8000cc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	689a      	ldr	r2, [r3, #8]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d123      	bne.n	8000d14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	08da      	lsrs	r2, r3, #3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3208      	adds	r2, #8
 8000cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	691a      	ldr	r2, [r3, #16]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	08da      	lsrs	r2, r3, #3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3208      	adds	r2, #8
 8000d0e:	69b9      	ldr	r1, [r7, #24]
 8000d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0203 	and.w	r2, r3, #3
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 80b4 	beq.w	8000ebe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b60      	ldr	r3, [pc, #384]	@ (8000edc <HAL_GPIO_Init+0x30c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	4a5f      	ldr	r2, [pc, #380]	@ (8000edc <HAL_GPIO_Init+0x30c>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d66:	4b5d      	ldr	r3, [pc, #372]	@ (8000edc <HAL_GPIO_Init+0x30c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d72:	4a5b      	ldr	r2, [pc, #364]	@ (8000ee0 <HAL_GPIO_Init+0x310>)
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	3302      	adds	r3, #2
 8000d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	220f      	movs	r2, #15
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a52      	ldr	r2, [pc, #328]	@ (8000ee4 <HAL_GPIO_Init+0x314>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d02b      	beq.n	8000df6 <HAL_GPIO_Init+0x226>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a51      	ldr	r2, [pc, #324]	@ (8000ee8 <HAL_GPIO_Init+0x318>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d025      	beq.n	8000df2 <HAL_GPIO_Init+0x222>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a50      	ldr	r2, [pc, #320]	@ (8000eec <HAL_GPIO_Init+0x31c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d01f      	beq.n	8000dee <HAL_GPIO_Init+0x21e>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4f      	ldr	r2, [pc, #316]	@ (8000ef0 <HAL_GPIO_Init+0x320>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d019      	beq.n	8000dea <HAL_GPIO_Init+0x21a>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4e      	ldr	r2, [pc, #312]	@ (8000ef4 <HAL_GPIO_Init+0x324>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d013      	beq.n	8000de6 <HAL_GPIO_Init+0x216>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4d      	ldr	r2, [pc, #308]	@ (8000ef8 <HAL_GPIO_Init+0x328>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d00d      	beq.n	8000de2 <HAL_GPIO_Init+0x212>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4c      	ldr	r2, [pc, #304]	@ (8000efc <HAL_GPIO_Init+0x32c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d007      	beq.n	8000dde <HAL_GPIO_Init+0x20e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4b      	ldr	r2, [pc, #300]	@ (8000f00 <HAL_GPIO_Init+0x330>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d101      	bne.n	8000dda <HAL_GPIO_Init+0x20a>
 8000dd6:	2307      	movs	r3, #7
 8000dd8:	e00e      	b.n	8000df8 <HAL_GPIO_Init+0x228>
 8000dda:	2308      	movs	r3, #8
 8000ddc:	e00c      	b.n	8000df8 <HAL_GPIO_Init+0x228>
 8000dde:	2306      	movs	r3, #6
 8000de0:	e00a      	b.n	8000df8 <HAL_GPIO_Init+0x228>
 8000de2:	2305      	movs	r3, #5
 8000de4:	e008      	b.n	8000df8 <HAL_GPIO_Init+0x228>
 8000de6:	2304      	movs	r3, #4
 8000de8:	e006      	b.n	8000df8 <HAL_GPIO_Init+0x228>
 8000dea:	2303      	movs	r3, #3
 8000dec:	e004      	b.n	8000df8 <HAL_GPIO_Init+0x228>
 8000dee:	2302      	movs	r3, #2
 8000df0:	e002      	b.n	8000df8 <HAL_GPIO_Init+0x228>
 8000df2:	2301      	movs	r3, #1
 8000df4:	e000      	b.n	8000df8 <HAL_GPIO_Init+0x228>
 8000df6:	2300      	movs	r3, #0
 8000df8:	69fa      	ldr	r2, [r7, #28]
 8000dfa:	f002 0203 	and.w	r2, r2, #3
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	4093      	lsls	r3, r2
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e08:	4935      	ldr	r1, [pc, #212]	@ (8000ee0 <HAL_GPIO_Init+0x310>)
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	3302      	adds	r3, #2
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e16:	4b3b      	ldr	r3, [pc, #236]	@ (8000f04 <HAL_GPIO_Init+0x334>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e3a:	4a32      	ldr	r2, [pc, #200]	@ (8000f04 <HAL_GPIO_Init+0x334>)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e40:	4b30      	ldr	r3, [pc, #192]	@ (8000f04 <HAL_GPIO_Init+0x334>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e64:	4a27      	ldr	r2, [pc, #156]	@ (8000f04 <HAL_GPIO_Init+0x334>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	@ (8000f04 <HAL_GPIO_Init+0x334>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8000f04 <HAL_GPIO_Init+0x334>)
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <HAL_GPIO_Init+0x334>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eb8:	4a12      	ldr	r2, [pc, #72]	@ (8000f04 <HAL_GPIO_Init+0x334>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	61fb      	str	r3, [r7, #28]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	2b0f      	cmp	r3, #15
 8000ec8:	f67f ae90 	bls.w	8000bec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3724      	adds	r7, #36	@ 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40013800 	.word	0x40013800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	40020800 	.word	0x40020800
 8000ef0:	40020c00 	.word	0x40020c00
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40021400 	.word	0x40021400
 8000efc:	40021800 	.word	0x40021800
 8000f00:	40021c00 	.word	0x40021c00
 8000f04:	40013c00 	.word	0x40013c00

08000f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
 8000f14:	4613      	mov	r3, r2
 8000f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f18:	787b      	ldrb	r3, [r7, #1]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f1e:	887a      	ldrh	r2, [r7, #2]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f24:	e003      	b.n	8000f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	041a      	lsls	r2, r3, #16
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	619a      	str	r2, [r3, #24]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b085      	sub	sp, #20
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f4c:	887a      	ldrh	r2, [r7, #2]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4013      	ands	r3, r2
 8000f52:	041a      	lsls	r2, r3, #16
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	400b      	ands	r3, r1
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	619a      	str	r2, [r3, #24]
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e267      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d075      	beq.n	800107a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f8e:	4b88      	ldr	r3, [pc, #544]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	d00c      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f9a:	4b85      	ldr	r3, [pc, #532]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d112      	bne.n	8000fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fa6:	4b82      	ldr	r3, [pc, #520]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fb2:	d10b      	bne.n	8000fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	4b7e      	ldr	r3, [pc, #504]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d05b      	beq.n	8001078 <HAL_RCC_OscConfig+0x108>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d157      	bne.n	8001078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e242      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fd4:	d106      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x74>
 8000fd6:	4b76      	ldr	r3, [pc, #472]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a75      	ldr	r2, [pc, #468]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e01d      	b.n	8001020 <HAL_RCC_OscConfig+0xb0>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x98>
 8000fee:	4b70      	ldr	r3, [pc, #448]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a6f      	ldr	r2, [pc, #444]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a6c      	ldr	r2, [pc, #432]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e00b      	b.n	8001020 <HAL_RCC_OscConfig+0xb0>
 8001008:	4b69      	ldr	r3, [pc, #420]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a68      	ldr	r2, [pc, #416]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 800100e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b66      	ldr	r3, [pc, #408]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a65      	ldr	r2, [pc, #404]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 800101a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800101e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d013      	beq.n	8001050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff fce4 	bl	80009f4 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001030:	f7ff fce0 	bl	80009f4 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	@ 0x64
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e207      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	4b5b      	ldr	r3, [pc, #364]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f0      	beq.n	8001030 <HAL_RCC_OscConfig+0xc0>
 800104e:	e014      	b.n	800107a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fcd0 	bl	80009f4 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fccc 	bl	80009f4 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	@ 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e1f3      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106a:	4b51      	ldr	r3, [pc, #324]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0xe8>
 8001076:	e000      	b.n	800107a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d063      	beq.n	800114e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001086:	4b4a      	ldr	r3, [pc, #296]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00b      	beq.n	80010aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001092:	4b47      	ldr	r3, [pc, #284]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800109a:	2b08      	cmp	r3, #8
 800109c:	d11c      	bne.n	80010d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800109e:	4b44      	ldr	r3, [pc, #272]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d116      	bne.n	80010d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010aa:	4b41      	ldr	r3, [pc, #260]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d005      	beq.n	80010c2 <HAL_RCC_OscConfig+0x152>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d001      	beq.n	80010c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e1c7      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c2:	4b3b      	ldr	r3, [pc, #236]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4937      	ldr	r1, [pc, #220]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d6:	e03a      	b.n	800114e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d020      	beq.n	8001122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e0:	4b34      	ldr	r3, [pc, #208]	@ (80011b4 <HAL_RCC_OscConfig+0x244>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e6:	f7ff fc85 	bl	80009f4 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ee:	f7ff fc81 	bl	80009f4 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e1a8      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001100:	4b2b      	ldr	r3, [pc, #172]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f0      	beq.n	80010ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4925      	ldr	r1, [pc, #148]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 800111c:	4313      	orrs	r3, r2
 800111e:	600b      	str	r3, [r1, #0]
 8001120:	e015      	b.n	800114e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001122:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <HAL_RCC_OscConfig+0x244>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001128:	f7ff fc64 	bl	80009f4 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001130:	f7ff fc60 	bl	80009f4 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e187      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001142:	4b1b      	ldr	r3, [pc, #108]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f0      	bne.n	8001130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d036      	beq.n	80011c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d016      	beq.n	8001190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <HAL_RCC_OscConfig+0x248>)
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001168:	f7ff fc44 	bl	80009f4 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fc40 	bl	80009f4 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e167      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001182:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0x200>
 800118e:	e01b      	b.n	80011c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <HAL_RCC_OscConfig+0x248>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001196:	f7ff fc2d 	bl	80009f4 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119c:	e00e      	b.n	80011bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800119e:	f7ff fc29 	bl	80009f4 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d907      	bls.n	80011bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e150      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
 80011b0:	40023800 	.word	0x40023800
 80011b4:	42470000 	.word	0x42470000
 80011b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011bc:	4b88      	ldr	r3, [pc, #544]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 80011be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1ea      	bne.n	800119e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 8097 	beq.w	8001304 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011da:	4b81      	ldr	r3, [pc, #516]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10f      	bne.n	8001206 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	4b7d      	ldr	r3, [pc, #500]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	4a7c      	ldr	r2, [pc, #496]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f6:	4b7a      	ldr	r3, [pc, #488]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001202:	2301      	movs	r3, #1
 8001204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001206:	4b77      	ldr	r3, [pc, #476]	@ (80013e4 <HAL_RCC_OscConfig+0x474>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d118      	bne.n	8001244 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001212:	4b74      	ldr	r3, [pc, #464]	@ (80013e4 <HAL_RCC_OscConfig+0x474>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a73      	ldr	r2, [pc, #460]	@ (80013e4 <HAL_RCC_OscConfig+0x474>)
 8001218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800121c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800121e:	f7ff fbe9 	bl	80009f4 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001226:	f7ff fbe5 	bl	80009f4 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e10c      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001238:	4b6a      	ldr	r3, [pc, #424]	@ (80013e4 <HAL_RCC_OscConfig+0x474>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d106      	bne.n	800125a <HAL_RCC_OscConfig+0x2ea>
 800124c:	4b64      	ldr	r3, [pc, #400]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 800124e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001250:	4a63      	ldr	r2, [pc, #396]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6713      	str	r3, [r2, #112]	@ 0x70
 8001258:	e01c      	b.n	8001294 <HAL_RCC_OscConfig+0x324>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2b05      	cmp	r3, #5
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x30c>
 8001262:	4b5f      	ldr	r3, [pc, #380]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001266:	4a5e      	ldr	r2, [pc, #376]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6713      	str	r3, [r2, #112]	@ 0x70
 800126e:	4b5c      	ldr	r3, [pc, #368]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001272:	4a5b      	ldr	r2, [pc, #364]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6713      	str	r3, [r2, #112]	@ 0x70
 800127a:	e00b      	b.n	8001294 <HAL_RCC_OscConfig+0x324>
 800127c:	4b58      	ldr	r3, [pc, #352]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 800127e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001280:	4a57      	ldr	r2, [pc, #348]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001282:	f023 0301 	bic.w	r3, r3, #1
 8001286:	6713      	str	r3, [r2, #112]	@ 0x70
 8001288:	4b55      	ldr	r3, [pc, #340]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 800128a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800128c:	4a54      	ldr	r2, [pc, #336]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 800128e:	f023 0304 	bic.w	r3, r3, #4
 8001292:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d015      	beq.n	80012c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129c:	f7ff fbaa 	bl	80009f4 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a2:	e00a      	b.n	80012ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a4:	f7ff fba6 	bl	80009f4 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e0cb      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ba:	4b49      	ldr	r3, [pc, #292]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 80012bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0ee      	beq.n	80012a4 <HAL_RCC_OscConfig+0x334>
 80012c6:	e014      	b.n	80012f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c8:	f7ff fb94 	bl	80009f4 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ce:	e00a      	b.n	80012e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d0:	f7ff fb90 	bl	80009f4 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012de:	4293      	cmp	r3, r2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e0b5      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e6:	4b3e      	ldr	r3, [pc, #248]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 80012e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1ee      	bne.n	80012d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012f2:	7dfb      	ldrb	r3, [r7, #23]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f8:	4b39      	ldr	r3, [pc, #228]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	4a38      	ldr	r2, [pc, #224]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 80012fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001302:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80a1 	beq.w	8001450 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800130e:	4b34      	ldr	r3, [pc, #208]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b08      	cmp	r3, #8
 8001318:	d05c      	beq.n	80013d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d141      	bne.n	80013a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001322:	4b31      	ldr	r3, [pc, #196]	@ (80013e8 <HAL_RCC_OscConfig+0x478>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fb64 	bl	80009f4 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001330:	f7ff fb60 	bl	80009f4 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e087      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001342:	4b27      	ldr	r3, [pc, #156]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69da      	ldr	r2, [r3, #28]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135c:	019b      	lsls	r3, r3, #6
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001364:	085b      	lsrs	r3, r3, #1
 8001366:	3b01      	subs	r3, #1
 8001368:	041b      	lsls	r3, r3, #16
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001370:	061b      	lsls	r3, r3, #24
 8001372:	491b      	ldr	r1, [pc, #108]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <HAL_RCC_OscConfig+0x478>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fb39 	bl	80009f4 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001386:	f7ff fb35 	bl	80009f4 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e05c      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x416>
 80013a4:	e054      	b.n	8001450 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <HAL_RCC_OscConfig+0x478>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fb22 	bl	80009f4 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b4:	f7ff fb1e 	bl	80009f4 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e045      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_RCC_OscConfig+0x470>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x444>
 80013d2:	e03d      	b.n	8001450 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d107      	bne.n	80013ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e038      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40007000 	.word	0x40007000
 80013e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <HAL_RCC_OscConfig+0x4ec>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d028      	beq.n	800144c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001404:	429a      	cmp	r2, r3
 8001406:	d121      	bne.n	800144c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	429a      	cmp	r2, r3
 8001414:	d11a      	bne.n	800144c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800141c:	4013      	ands	r3, r2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001422:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001424:	4293      	cmp	r3, r2
 8001426:	d111      	bne.n	800144c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001432:	085b      	lsrs	r3, r3, #1
 8001434:	3b01      	subs	r3, #1
 8001436:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001438:	429a      	cmp	r2, r3
 800143a:	d107      	bne.n	800144c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001446:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001448:	429a      	cmp	r2, r3
 800144a:	d001      	beq.n	8001450 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0cc      	b.n	800160e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001474:	4b68      	ldr	r3, [pc, #416]	@ (8001618 <HAL_RCC_ClockConfig+0x1b8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d90c      	bls.n	800149c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001482:	4b65      	ldr	r3, [pc, #404]	@ (8001618 <HAL_RCC_ClockConfig+0x1b8>)
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148a:	4b63      	ldr	r3, [pc, #396]	@ (8001618 <HAL_RCC_ClockConfig+0x1b8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d001      	beq.n	800149c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0b8      	b.n	800160e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d020      	beq.n	80014ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b4:	4b59      	ldr	r3, [pc, #356]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	4a58      	ldr	r2, [pc, #352]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014cc:	4b53      	ldr	r3, [pc, #332]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	4a52      	ldr	r2, [pc, #328]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d8:	4b50      	ldr	r3, [pc, #320]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	494d      	ldr	r1, [pc, #308]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d044      	beq.n	8001580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d107      	bne.n	800150e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	4b47      	ldr	r3, [pc, #284]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d119      	bne.n	800153e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e07f      	b.n	800160e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800151a:	2b03      	cmp	r3, #3
 800151c:	d107      	bne.n	800152e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151e:	4b3f      	ldr	r3, [pc, #252]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d109      	bne.n	800153e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e06f      	b.n	800160e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152e:	4b3b      	ldr	r3, [pc, #236]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e067      	b.n	800160e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800153e:	4b37      	ldr	r3, [pc, #220]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f023 0203 	bic.w	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4934      	ldr	r1, [pc, #208]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 800154c:	4313      	orrs	r3, r2
 800154e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001550:	f7ff fa50 	bl	80009f4 <HAL_GetTick>
 8001554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001556:	e00a      	b.n	800156e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001558:	f7ff fa4c 	bl	80009f4 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e04f      	b.n	800160e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156e:	4b2b      	ldr	r3, [pc, #172]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 020c 	and.w	r2, r3, #12
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	429a      	cmp	r2, r3
 800157e:	d1eb      	bne.n	8001558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001580:	4b25      	ldr	r3, [pc, #148]	@ (8001618 <HAL_RCC_ClockConfig+0x1b8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d20c      	bcs.n	80015a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158e:	4b22      	ldr	r3, [pc, #136]	@ (8001618 <HAL_RCC_ClockConfig+0x1b8>)
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001596:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <HAL_RCC_ClockConfig+0x1b8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e032      	b.n	800160e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b4:	4b19      	ldr	r3, [pc, #100]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	4916      	ldr	r1, [pc, #88]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d009      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015d2:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	490e      	ldr	r1, [pc, #56]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015e6:	f000 f821 	bl	800162c <HAL_RCC_GetSysClockFreq>
 80015ea:	4602      	mov	r2, r0
 80015ec:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	490a      	ldr	r1, [pc, #40]	@ (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 80015f8:	5ccb      	ldrb	r3, [r1, r3]
 80015fa:	fa22 f303 	lsr.w	r3, r2, r3
 80015fe:	4a09      	ldr	r2, [pc, #36]	@ (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <HAL_RCC_ClockConfig+0x1c8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff f8e8 	bl	80007dc <HAL_InitTick>

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023c00 	.word	0x40023c00
 800161c:	40023800 	.word	0x40023800
 8001620:	08003680 	.word	0x08003680
 8001624:	20000000 	.word	0x20000000
 8001628:	20000004 	.word	0x20000004

0800162c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800162c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001630:	b094      	sub	sp, #80	@ 0x50
 8001632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	647b      	str	r3, [r7, #68]	@ 0x44
 8001638:	2300      	movs	r3, #0
 800163a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800163c:	2300      	movs	r3, #0
 800163e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001644:	4b79      	ldr	r3, [pc, #484]	@ (800182c <HAL_RCC_GetSysClockFreq+0x200>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b08      	cmp	r3, #8
 800164e:	d00d      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x40>
 8001650:	2b08      	cmp	r3, #8
 8001652:	f200 80e1 	bhi.w	8001818 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001656:	2b00      	cmp	r3, #0
 8001658:	d002      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x34>
 800165a:	2b04      	cmp	r3, #4
 800165c:	d003      	beq.n	8001666 <HAL_RCC_GetSysClockFreq+0x3a>
 800165e:	e0db      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001660:	4b73      	ldr	r3, [pc, #460]	@ (8001830 <HAL_RCC_GetSysClockFreq+0x204>)
 8001662:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001664:	e0db      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001666:	4b73      	ldr	r3, [pc, #460]	@ (8001834 <HAL_RCC_GetSysClockFreq+0x208>)
 8001668:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800166a:	e0d8      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800166c:	4b6f      	ldr	r3, [pc, #444]	@ (800182c <HAL_RCC_GetSysClockFreq+0x200>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001674:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001676:	4b6d      	ldr	r3, [pc, #436]	@ (800182c <HAL_RCC_GetSysClockFreq+0x200>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d063      	beq.n	800174a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001682:	4b6a      	ldr	r3, [pc, #424]	@ (800182c <HAL_RCC_GetSysClockFreq+0x200>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	099b      	lsrs	r3, r3, #6
 8001688:	2200      	movs	r2, #0
 800168a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800168c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800168e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001694:	633b      	str	r3, [r7, #48]	@ 0x30
 8001696:	2300      	movs	r3, #0
 8001698:	637b      	str	r3, [r7, #52]	@ 0x34
 800169a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800169e:	4622      	mov	r2, r4
 80016a0:	462b      	mov	r3, r5
 80016a2:	f04f 0000 	mov.w	r0, #0
 80016a6:	f04f 0100 	mov.w	r1, #0
 80016aa:	0159      	lsls	r1, r3, #5
 80016ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016b0:	0150      	lsls	r0, r2, #5
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4621      	mov	r1, r4
 80016b8:	1a51      	subs	r1, r2, r1
 80016ba:	6139      	str	r1, [r7, #16]
 80016bc:	4629      	mov	r1, r5
 80016be:	eb63 0301 	sbc.w	r3, r3, r1
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016d0:	4659      	mov	r1, fp
 80016d2:	018b      	lsls	r3, r1, #6
 80016d4:	4651      	mov	r1, sl
 80016d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016da:	4651      	mov	r1, sl
 80016dc:	018a      	lsls	r2, r1, #6
 80016de:	4651      	mov	r1, sl
 80016e0:	ebb2 0801 	subs.w	r8, r2, r1
 80016e4:	4659      	mov	r1, fp
 80016e6:	eb63 0901 	sbc.w	r9, r3, r1
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016fe:	4690      	mov	r8, r2
 8001700:	4699      	mov	r9, r3
 8001702:	4623      	mov	r3, r4
 8001704:	eb18 0303 	adds.w	r3, r8, r3
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	462b      	mov	r3, r5
 800170c:	eb49 0303 	adc.w	r3, r9, r3
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800171e:	4629      	mov	r1, r5
 8001720:	024b      	lsls	r3, r1, #9
 8001722:	4621      	mov	r1, r4
 8001724:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001728:	4621      	mov	r1, r4
 800172a:	024a      	lsls	r2, r1, #9
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001732:	2200      	movs	r2, #0
 8001734:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001736:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001738:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800173c:	f7fe fd48 	bl	80001d0 <__aeabi_uldivmod>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4613      	mov	r3, r2
 8001746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001748:	e058      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174a:	4b38      	ldr	r3, [pc, #224]	@ (800182c <HAL_RCC_GetSysClockFreq+0x200>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	2200      	movs	r2, #0
 8001752:	4618      	mov	r0, r3
 8001754:	4611      	mov	r1, r2
 8001756:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800175a:	623b      	str	r3, [r7, #32]
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001760:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001764:	4642      	mov	r2, r8
 8001766:	464b      	mov	r3, r9
 8001768:	f04f 0000 	mov.w	r0, #0
 800176c:	f04f 0100 	mov.w	r1, #0
 8001770:	0159      	lsls	r1, r3, #5
 8001772:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001776:	0150      	lsls	r0, r2, #5
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4641      	mov	r1, r8
 800177e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001782:	4649      	mov	r1, r9
 8001784:	eb63 0b01 	sbc.w	fp, r3, r1
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001794:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001798:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800179c:	ebb2 040a 	subs.w	r4, r2, sl
 80017a0:	eb63 050b 	sbc.w	r5, r3, fp
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	00eb      	lsls	r3, r5, #3
 80017ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017b2:	00e2      	lsls	r2, r4, #3
 80017b4:	4614      	mov	r4, r2
 80017b6:	461d      	mov	r5, r3
 80017b8:	4643      	mov	r3, r8
 80017ba:	18e3      	adds	r3, r4, r3
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	464b      	mov	r3, r9
 80017c0:	eb45 0303 	adc.w	r3, r5, r3
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017d2:	4629      	mov	r1, r5
 80017d4:	028b      	lsls	r3, r1, #10
 80017d6:	4621      	mov	r1, r4
 80017d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017dc:	4621      	mov	r1, r4
 80017de:	028a      	lsls	r2, r1, #10
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017e6:	2200      	movs	r2, #0
 80017e8:	61bb      	str	r3, [r7, #24]
 80017ea:	61fa      	str	r2, [r7, #28]
 80017ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017f0:	f7fe fcee 	bl	80001d0 <__aeabi_uldivmod>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4613      	mov	r3, r2
 80017fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017fc:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <HAL_RCC_GetSysClockFreq+0x200>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	0c1b      	lsrs	r3, r3, #16
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	3301      	adds	r3, #1
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800180c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800180e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001810:	fbb2 f3f3 	udiv	r3, r2, r3
 8001814:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001816:	e002      	b.n	800181e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_RCC_GetSysClockFreq+0x204>)
 800181a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800181c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800181e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001820:	4618      	mov	r0, r3
 8001822:	3750      	adds	r7, #80	@ 0x50
 8001824:	46bd      	mov	sp, r7
 8001826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	00f42400 	.word	0x00f42400
 8001834:	007a1200 	.word	0x007a1200

08001838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_RCC_GetHCLKFreq+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000000 	.word	0x20000000

08001850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001854:	f7ff fff0 	bl	8001838 <HAL_RCC_GetHCLKFreq>
 8001858:	4602      	mov	r2, r0
 800185a:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	0b5b      	lsrs	r3, r3, #13
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	4903      	ldr	r1, [pc, #12]	@ (8001874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001866:	5ccb      	ldrb	r3, [r1, r3]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800186c:	4618      	mov	r0, r3
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	08003690 	.word	0x08003690

08001878 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	220f      	movs	r2, #15
 8001886:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_RCC_GetClockConfig+0x5c>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 0203 	and.w	r2, r3, #3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001894:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <HAL_RCC_GetClockConfig+0x5c>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018a0:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <HAL_RCC_GetClockConfig+0x5c>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018ac:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_RCC_GetClockConfig+0x5c>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018ba:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <HAL_RCC_GetClockConfig+0x60>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0207 	and.w	r2, r3, #7
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	601a      	str	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40023c00 	.word	0x40023c00

080018dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e041      	b.n	8001972 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d106      	bne.n	8001908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f839 	bl	800197a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2202      	movs	r2, #2
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3304      	adds	r3, #4
 8001918:	4619      	mov	r1, r3
 800191a:	4610      	mov	r0, r2
 800191c:	f000 f9c0 	bl	8001ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d001      	beq.n	80019a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e04e      	b.n	8001a46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2202      	movs	r2, #2
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a23      	ldr	r2, [pc, #140]	@ (8001a54 <HAL_TIM_Base_Start_IT+0xc4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d022      	beq.n	8001a10 <HAL_TIM_Base_Start_IT+0x80>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019d2:	d01d      	beq.n	8001a10 <HAL_TIM_Base_Start_IT+0x80>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a58 <HAL_TIM_Base_Start_IT+0xc8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d018      	beq.n	8001a10 <HAL_TIM_Base_Start_IT+0x80>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a5c <HAL_TIM_Base_Start_IT+0xcc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d013      	beq.n	8001a10 <HAL_TIM_Base_Start_IT+0x80>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001a60 <HAL_TIM_Base_Start_IT+0xd0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00e      	beq.n	8001a10 <HAL_TIM_Base_Start_IT+0x80>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a64 <HAL_TIM_Base_Start_IT+0xd4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d009      	beq.n	8001a10 <HAL_TIM_Base_Start_IT+0x80>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	@ (8001a68 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d004      	beq.n	8001a10 <HAL_TIM_Base_Start_IT+0x80>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a18      	ldr	r2, [pc, #96]	@ (8001a6c <HAL_TIM_Base_Start_IT+0xdc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d111      	bne.n	8001a34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d010      	beq.n	8001a44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0201 	orr.w	r2, r2, #1
 8001a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a32:	e007      	b.n	8001a44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40010000 	.word	0x40010000
 8001a58:	40000400 	.word	0x40000400
 8001a5c:	40000800 	.word	0x40000800
 8001a60:	40000c00 	.word	0x40000c00
 8001a64:	40010400 	.word	0x40010400
 8001a68:	40014000 	.word	0x40014000
 8001a6c:	40001800 	.word	0x40001800

08001a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d020      	beq.n	8001ad4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01b      	beq.n	8001ad4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f06f 0202 	mvn.w	r2, #2
 8001aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f8d2 	bl	8001c64 <HAL_TIM_IC_CaptureCallback>
 8001ac0:	e005      	b.n	8001ace <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f8c4 	bl	8001c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f8d5 	bl	8001c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d020      	beq.n	8001b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d01b      	beq.n	8001b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0204 	mvn.w	r2, #4
 8001af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2202      	movs	r2, #2
 8001af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f8ac 	bl	8001c64 <HAL_TIM_IC_CaptureCallback>
 8001b0c:	e005      	b.n	8001b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f89e 	bl	8001c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f8af 	bl	8001c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d020      	beq.n	8001b6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01b      	beq.n	8001b6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 0208 	mvn.w	r2, #8
 8001b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2204      	movs	r2, #4
 8001b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f886 	bl	8001c64 <HAL_TIM_IC_CaptureCallback>
 8001b58:	e005      	b.n	8001b66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f878 	bl	8001c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f889 	bl	8001c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d020      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01b      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f06f 0210 	mvn.w	r2, #16
 8001b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f860 	bl	8001c64 <HAL_TIM_IC_CaptureCallback>
 8001ba4:	e005      	b.n	8001bb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f852 	bl	8001c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f863 	bl	8001c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00c      	beq.n	8001bdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0201 	mvn.w	r2, #1
 8001bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7fe fdbc 	bl	8000754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00c      	beq.n	8001c00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f906 	bl	8001e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00c      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d007      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f834 	bl	8001c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00c      	beq.n	8001c48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0220 	mvn.w	r2, #32
 8001c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8d8 	bl	8001df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a46      	ldr	r2, [pc, #280]	@ (8001dcc <TIM_Base_SetConfig+0x12c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d013      	beq.n	8001ce0 <TIM_Base_SetConfig+0x40>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cbe:	d00f      	beq.n	8001ce0 <TIM_Base_SetConfig+0x40>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a43      	ldr	r2, [pc, #268]	@ (8001dd0 <TIM_Base_SetConfig+0x130>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00b      	beq.n	8001ce0 <TIM_Base_SetConfig+0x40>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a42      	ldr	r2, [pc, #264]	@ (8001dd4 <TIM_Base_SetConfig+0x134>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d007      	beq.n	8001ce0 <TIM_Base_SetConfig+0x40>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a41      	ldr	r2, [pc, #260]	@ (8001dd8 <TIM_Base_SetConfig+0x138>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d003      	beq.n	8001ce0 <TIM_Base_SetConfig+0x40>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a40      	ldr	r2, [pc, #256]	@ (8001ddc <TIM_Base_SetConfig+0x13c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d108      	bne.n	8001cf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a35      	ldr	r2, [pc, #212]	@ (8001dcc <TIM_Base_SetConfig+0x12c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d02b      	beq.n	8001d52 <TIM_Base_SetConfig+0xb2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d00:	d027      	beq.n	8001d52 <TIM_Base_SetConfig+0xb2>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a32      	ldr	r2, [pc, #200]	@ (8001dd0 <TIM_Base_SetConfig+0x130>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d023      	beq.n	8001d52 <TIM_Base_SetConfig+0xb2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a31      	ldr	r2, [pc, #196]	@ (8001dd4 <TIM_Base_SetConfig+0x134>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01f      	beq.n	8001d52 <TIM_Base_SetConfig+0xb2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a30      	ldr	r2, [pc, #192]	@ (8001dd8 <TIM_Base_SetConfig+0x138>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01b      	beq.n	8001d52 <TIM_Base_SetConfig+0xb2>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a2f      	ldr	r2, [pc, #188]	@ (8001ddc <TIM_Base_SetConfig+0x13c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d017      	beq.n	8001d52 <TIM_Base_SetConfig+0xb2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a2e      	ldr	r2, [pc, #184]	@ (8001de0 <TIM_Base_SetConfig+0x140>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <TIM_Base_SetConfig+0xb2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8001de4 <TIM_Base_SetConfig+0x144>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00f      	beq.n	8001d52 <TIM_Base_SetConfig+0xb2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a2c      	ldr	r2, [pc, #176]	@ (8001de8 <TIM_Base_SetConfig+0x148>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00b      	beq.n	8001d52 <TIM_Base_SetConfig+0xb2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8001dec <TIM_Base_SetConfig+0x14c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <TIM_Base_SetConfig+0xb2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a2a      	ldr	r2, [pc, #168]	@ (8001df0 <TIM_Base_SetConfig+0x150>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d003      	beq.n	8001d52 <TIM_Base_SetConfig+0xb2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a29      	ldr	r2, [pc, #164]	@ (8001df4 <TIM_Base_SetConfig+0x154>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d108      	bne.n	8001d64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a10      	ldr	r2, [pc, #64]	@ (8001dcc <TIM_Base_SetConfig+0x12c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d003      	beq.n	8001d98 <TIM_Base_SetConfig+0xf8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a12      	ldr	r2, [pc, #72]	@ (8001ddc <TIM_Base_SetConfig+0x13c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d103      	bne.n	8001da0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d105      	bne.n	8001dbe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f023 0201 	bic.w	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	611a      	str	r2, [r3, #16]
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40010000 	.word	0x40010000
 8001dd0:	40000400 	.word	0x40000400
 8001dd4:	40000800 	.word	0x40000800
 8001dd8:	40000c00 	.word	0x40000c00
 8001ddc:	40010400 	.word	0x40010400
 8001de0:	40014000 	.word	0x40014000
 8001de4:	40014400 	.word	0x40014400
 8001de8:	40014800 	.word	0x40014800
 8001dec:	40001800 	.word	0x40001800
 8001df0:	40001c00 	.word	0x40001c00
 8001df4:	40002000 	.word	0x40002000

08001df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e32:	2b84      	cmp	r3, #132	@ 0x84
 8001e34:	d005      	beq.n	8001e42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001e36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3303      	adds	r3, #3
 8001e40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001e42:	68fb      	ldr	r3, [r7, #12]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001e54:	f000 fb7c 	bl	8002550 <vTaskStartScheduler>
  
  return osOK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e60:	b089      	sub	sp, #36	@ 0x24
 8001e62:	af04      	add	r7, sp, #16
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d020      	beq.n	8001eb2 <osThreadCreate+0x54>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01c      	beq.n	8001eb2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685c      	ldr	r4, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691e      	ldr	r6, [r3, #16]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ffc8 	bl	8001e20 <makeFreeRtosPriority>
 8001e90:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e9a:	9202      	str	r2, [sp, #8]
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	9100      	str	r1, [sp, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4632      	mov	r2, r6
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f000 f8ed 	bl	8002086 <xTaskCreateStatic>
 8001eac:	4603      	mov	r3, r0
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e01c      	b.n	8001eec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685c      	ldr	r4, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ebe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ffaa 	bl	8001e20 <makeFreeRtosPriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	9200      	str	r2, [sp, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	4632      	mov	r2, r6
 8001eda:	4629      	mov	r1, r5
 8001edc:	4620      	mov	r0, r4
 8001ede:	f000 f932 	bl	8002146 <xTaskCreate>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d001      	beq.n	8001eec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e000      	b.n	8001eee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001eec:	68fb      	ldr	r3, [r7, #12]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ef6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <osDelay+0x16>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	e000      	b.n	8001f0e <osDelay+0x18>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fae8 	bl	80024e4 <vTaskDelay>
  
  return osOK;
 8001f14:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f103 0208 	add.w	r2, r3, #8
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f36:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f103 0208 	add.w	r2, r3, #8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f103 0208 	add.w	r2, r3, #8
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	601a      	str	r2, [r3, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fd6:	d103      	bne.n	8001fe0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	e00c      	b.n	8001ffa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3308      	adds	r3, #8
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	e002      	b.n	8001fee <vListInsert+0x2e>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d2f6      	bcs.n	8001fe8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	601a      	str	r2, [r3, #0]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002032:	b480      	push	{r7}
 8002034:	b085      	sub	sp, #20
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6892      	ldr	r2, [r2, #8]
 8002048:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6852      	ldr	r2, [r2, #4]
 8002052:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	429a      	cmp	r2, r3
 800205c:	d103      	bne.n	8002066 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	1e5a      	subs	r2, r3, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002086:	b580      	push	{r7, lr}
 8002088:	b08e      	sub	sp, #56	@ 0x38
 800208a:	af04      	add	r7, sp, #16
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10b      	bne.n	80020b2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800209a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800209e:	f383 8811 	msr	BASEPRI, r3
 80020a2:	f3bf 8f6f 	isb	sy
 80020a6:	f3bf 8f4f 	dsb	sy
 80020aa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	e7fd      	b.n	80020ae <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80020b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10b      	bne.n	80020d0 <xTaskCreateStatic+0x4a>
	__asm volatile
 80020b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	61fb      	str	r3, [r7, #28]
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80020d0:	23a0      	movs	r3, #160	@ 0xa0
 80020d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	2ba0      	cmp	r3, #160	@ 0xa0
 80020d8:	d00b      	beq.n	80020f2 <xTaskCreateStatic+0x6c>
	__asm volatile
 80020da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020de:	f383 8811 	msr	BASEPRI, r3
 80020e2:	f3bf 8f6f 	isb	sy
 80020e6:	f3bf 8f4f 	dsb	sy
 80020ea:	61bb      	str	r3, [r7, #24]
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	e7fd      	b.n	80020ee <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80020f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80020f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d01e      	beq.n	8002138 <xTaskCreateStatic+0xb2>
 80020fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01b      	beq.n	8002138 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002108:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800210a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210c:	2202      	movs	r2, #2
 800210e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002112:	2300      	movs	r3, #0
 8002114:	9303      	str	r3, [sp, #12]
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	9302      	str	r3, [sp, #8]
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f850 	bl	80021d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002130:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002132:	f000 f8ed 	bl	8002310 <prvAddNewTaskToReadyList>
 8002136:	e001      	b.n	800213c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800213c:	697b      	ldr	r3, [r7, #20]
	}
 800213e:	4618      	mov	r0, r3
 8002140:	3728      	adds	r7, #40	@ 0x28
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002146:	b580      	push	{r7, lr}
 8002148:	b08c      	sub	sp, #48	@ 0x30
 800214a:	af04      	add	r7, sp, #16
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4618      	mov	r0, r3
 800215c:	f000 ff8c 	bl	8003078 <pvPortMalloc>
 8002160:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00e      	beq.n	8002186 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002168:	20a0      	movs	r0, #160	@ 0xa0
 800216a:	f000 ff85 	bl	8003078 <pvPortMalloc>
 800216e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	631a      	str	r2, [r3, #48]	@ 0x30
 800217c:	e005      	b.n	800218a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800217e:	6978      	ldr	r0, [r7, #20]
 8002180:	f001 f848 	bl	8003214 <vPortFree>
 8002184:	e001      	b.n	800218a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d017      	beq.n	80021c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002198:	88fa      	ldrh	r2, [r7, #6]
 800219a:	2300      	movs	r3, #0
 800219c:	9303      	str	r3, [sp, #12]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	9302      	str	r3, [sp, #8]
 80021a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f80e 	bl	80021d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80021b4:	69f8      	ldr	r0, [r7, #28]
 80021b6:	f000 f8ab 	bl	8002310 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80021ba:	2301      	movs	r3, #1
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	e002      	b.n	80021c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80021c6:	69bb      	ldr	r3, [r7, #24]
	}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3720      	adds	r7, #32
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021e8:	3b01      	subs	r3, #1
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f023 0307 	bic.w	r3, r3, #7
 80021f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002206:	f383 8811 	msr	BASEPRI, r3
 800220a:	f3bf 8f6f 	isb	sy
 800220e:	f3bf 8f4f 	dsb	sy
 8002212:	617b      	str	r3, [r7, #20]
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	e7fd      	b.n	8002216 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d01f      	beq.n	8002260 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	e012      	b.n	800224c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	4413      	add	r3, r2
 800222c:	7819      	ldrb	r1, [r3, #0]
 800222e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	4413      	add	r3, r2
 8002234:	3334      	adds	r3, #52	@ 0x34
 8002236:	460a      	mov	r2, r1
 8002238:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	4413      	add	r3, r2
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3301      	adds	r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b0f      	cmp	r3, #15
 8002250:	d9e9      	bls.n	8002226 <prvInitialiseNewTask+0x56>
 8002252:	e000      	b.n	8002256 <prvInitialiseNewTask+0x86>
			{
				break;
 8002254:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800225e:	e003      	b.n	8002268 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226a:	2b06      	cmp	r3, #6
 800226c:	d901      	bls.n	8002272 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800226e:	2306      	movs	r3, #6
 8002270:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002274:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002276:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800227c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800227e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002280:	2200      	movs	r2, #0
 8002282:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002286:	3304      	adds	r3, #4
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fe68 	bl	8001f5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800228e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002290:	3318      	adds	r3, #24
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fe63 	bl	8001f5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800229c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800229e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a0:	f1c3 0207 	rsb	r2, r3, #7
 80022a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80022ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b0:	2200      	movs	r2, #0
 80022b2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80022b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80022be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c0:	334c      	adds	r3, #76	@ 0x4c
 80022c2:	224c      	movs	r2, #76	@ 0x4c
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f001 f8c4 	bl	8003454 <memset>
 80022cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002304 <prvInitialiseNewTask+0x134>)
 80022d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80022d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002308 <prvInitialiseNewTask+0x138>)
 80022d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80022d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022da:	4a0c      	ldr	r2, [pc, #48]	@ (800230c <prvInitialiseNewTask+0x13c>)
 80022dc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	68f9      	ldr	r1, [r7, #12]
 80022e2:	69b8      	ldr	r0, [r7, #24]
 80022e4:	f000 fcba 	bl	8002c5c <pxPortInitialiseStack>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80022ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80022fa:	bf00      	nop
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200040c0 	.word	0x200040c0
 8002308:	20004128 	.word	0x20004128
 800230c:	20004190 	.word	0x20004190

08002310 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002318:	f000 fdce 	bl	8002eb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800231c:	4b2a      	ldr	r3, [pc, #168]	@ (80023c8 <prvAddNewTaskToReadyList+0xb8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	4a29      	ldr	r2, [pc, #164]	@ (80023c8 <prvAddNewTaskToReadyList+0xb8>)
 8002324:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002326:	4b29      	ldr	r3, [pc, #164]	@ (80023cc <prvAddNewTaskToReadyList+0xbc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800232e:	4a27      	ldr	r2, [pc, #156]	@ (80023cc <prvAddNewTaskToReadyList+0xbc>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002334:	4b24      	ldr	r3, [pc, #144]	@ (80023c8 <prvAddNewTaskToReadyList+0xb8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d110      	bne.n	800235e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800233c:	f000 fb64 	bl	8002a08 <prvInitialiseTaskLists>
 8002340:	e00d      	b.n	800235e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002342:	4b23      	ldr	r3, [pc, #140]	@ (80023d0 <prvAddNewTaskToReadyList+0xc0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <prvAddNewTaskToReadyList+0xbc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	429a      	cmp	r2, r3
 8002356:	d802      	bhi.n	800235e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002358:	4a1c      	ldr	r2, [pc, #112]	@ (80023cc <prvAddNewTaskToReadyList+0xbc>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800235e:	4b1d      	ldr	r3, [pc, #116]	@ (80023d4 <prvAddNewTaskToReadyList+0xc4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	4a1b      	ldr	r2, [pc, #108]	@ (80023d4 <prvAddNewTaskToReadyList+0xc4>)
 8002366:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236c:	2201      	movs	r2, #1
 800236e:	409a      	lsls	r2, r3
 8002370:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <prvAddNewTaskToReadyList+0xc8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4313      	orrs	r3, r2
 8002376:	4a18      	ldr	r2, [pc, #96]	@ (80023d8 <prvAddNewTaskToReadyList+0xc8>)
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4a15      	ldr	r2, [pc, #84]	@ (80023dc <prvAddNewTaskToReadyList+0xcc>)
 8002388:	441a      	add	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3304      	adds	r3, #4
 800238e:	4619      	mov	r1, r3
 8002390:	4610      	mov	r0, r2
 8002392:	f7ff fdf1 	bl	8001f78 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002396:	f000 fdc1 	bl	8002f1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800239a:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <prvAddNewTaskToReadyList+0xc0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00e      	beq.n	80023c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023a2:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <prvAddNewTaskToReadyList+0xbc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d207      	bcs.n	80023c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80023b0:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <prvAddNewTaskToReadyList+0xd0>)
 80023b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	2000046c 	.word	0x2000046c
 80023cc:	2000036c 	.word	0x2000036c
 80023d0:	20000478 	.word	0x20000478
 80023d4:	20000488 	.word	0x20000488
 80023d8:	20000474 	.word	0x20000474
 80023dc:	20000370 	.word	0x20000370
 80023e0:	e000ed04 	.word	0xe000ed04

080023e4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	@ 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10b      	bne.n	8002410 <vTaskDelayUntil+0x2c>
	__asm volatile
 80023f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	617b      	str	r3, [r7, #20]
}
 800240a:	bf00      	nop
 800240c:	bf00      	nop
 800240e:	e7fd      	b.n	800240c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10b      	bne.n	800242e <vTaskDelayUntil+0x4a>
	__asm volatile
 8002416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	613b      	str	r3, [r7, #16]
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	e7fd      	b.n	800242a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800242e:	4b2a      	ldr	r3, [pc, #168]	@ (80024d8 <vTaskDelayUntil+0xf4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <vTaskDelayUntil+0x6a>
	__asm volatile
 8002436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	60fb      	str	r3, [r7, #12]
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	e7fd      	b.n	800244a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800244e:	f000 f8e9 	bl	8002624 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002452:	4b22      	ldr	r3, [pc, #136]	@ (80024dc <vTaskDelayUntil+0xf8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	4413      	add	r3, r2
 8002460:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6a3a      	ldr	r2, [r7, #32]
 8002468:	429a      	cmp	r2, r3
 800246a:	d20b      	bcs.n	8002484 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	429a      	cmp	r2, r3
 8002474:	d211      	bcs.n	800249a <vTaskDelayUntil+0xb6>
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	429a      	cmp	r2, r3
 800247c:	d90d      	bls.n	800249a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800247e:	2301      	movs	r3, #1
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
 8002482:	e00a      	b.n	800249a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	429a      	cmp	r2, r3
 800248c:	d303      	bcc.n	8002496 <vTaskDelayUntil+0xb2>
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	429a      	cmp	r2, r3
 8002494:	d901      	bls.n	800249a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8002496:	2301      	movs	r3, #1
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d006      	beq.n	80024b4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fb6e 	bl	8002b90 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80024b4:	f000 f8c4 	bl	8002640 <xTaskResumeAll>
 80024b8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d107      	bne.n	80024d0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80024c0:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <vTaskDelayUntil+0xfc>)
 80024c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80024d0:	bf00      	nop
 80024d2:	3728      	adds	r7, #40	@ 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000494 	.word	0x20000494
 80024dc:	20000470 	.word	0x20000470
 80024e0:	e000ed04 	.word	0xe000ed04

080024e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d018      	beq.n	8002528 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80024f6:	4b14      	ldr	r3, [pc, #80]	@ (8002548 <vTaskDelay+0x64>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <vTaskDelay+0x32>
	__asm volatile
 80024fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002502:	f383 8811 	msr	BASEPRI, r3
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	60bb      	str	r3, [r7, #8]
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	e7fd      	b.n	8002512 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002516:	f000 f885 	bl	8002624 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800251a:	2100      	movs	r1, #0
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fb37 	bl	8002b90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002522:	f000 f88d 	bl	8002640 <xTaskResumeAll>
 8002526:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800252e:	4b07      	ldr	r3, [pc, #28]	@ (800254c <vTaskDelay+0x68>)
 8002530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000494 	.word	0x20000494
 800254c:	e000ed04 	.word	0xe000ed04

08002550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	@ 0x28
 8002554:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800255e:	463a      	mov	r2, r7
 8002560:	1d39      	adds	r1, r7, #4
 8002562:	f107 0308 	add.w	r3, r7, #8
 8002566:	4618      	mov	r0, r3
 8002568:	f7fd ffaa 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800256c:	6839      	ldr	r1, [r7, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	9202      	str	r2, [sp, #8]
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	2300      	movs	r3, #0
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2300      	movs	r3, #0
 800257c:	460a      	mov	r2, r1
 800257e:	4921      	ldr	r1, [pc, #132]	@ (8002604 <vTaskStartScheduler+0xb4>)
 8002580:	4821      	ldr	r0, [pc, #132]	@ (8002608 <vTaskStartScheduler+0xb8>)
 8002582:	f7ff fd80 	bl	8002086 <xTaskCreateStatic>
 8002586:	4603      	mov	r3, r0
 8002588:	4a20      	ldr	r2, [pc, #128]	@ (800260c <vTaskStartScheduler+0xbc>)
 800258a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800258c:	4b1f      	ldr	r3, [pc, #124]	@ (800260c <vTaskStartScheduler+0xbc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002594:	2301      	movs	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e001      	b.n	800259e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d11b      	bne.n	80025dc <vTaskStartScheduler+0x8c>
	__asm volatile
 80025a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a8:	f383 8811 	msr	BASEPRI, r3
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	613b      	str	r3, [r7, #16]
}
 80025b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80025b8:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <vTaskStartScheduler+0xc0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	334c      	adds	r3, #76	@ 0x4c
 80025be:	4a15      	ldr	r2, [pc, #84]	@ (8002614 <vTaskStartScheduler+0xc4>)
 80025c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80025c2:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <vTaskStartScheduler+0xc8>)
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80025ca:	4b14      	ldr	r3, [pc, #80]	@ (800261c <vTaskStartScheduler+0xcc>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025d0:	4b13      	ldr	r3, [pc, #76]	@ (8002620 <vTaskStartScheduler+0xd0>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80025d6:	f000 fbcb 	bl	8002d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80025da:	e00f      	b.n	80025fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025e2:	d10b      	bne.n	80025fc <vTaskStartScheduler+0xac>
	__asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	60fb      	str	r3, [r7, #12]
}
 80025f6:	bf00      	nop
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <vTaskStartScheduler+0xa8>
}
 80025fc:	bf00      	nop
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	08003678 	.word	0x08003678
 8002608:	080029d9 	.word	0x080029d9
 800260c:	20000490 	.word	0x20000490
 8002610:	2000036c 	.word	0x2000036c
 8002614:	20000010 	.word	0x20000010
 8002618:	2000048c 	.word	0x2000048c
 800261c:	20000478 	.word	0x20000478
 8002620:	20000470 	.word	0x20000470

08002624 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002628:	4b04      	ldr	r3, [pc, #16]	@ (800263c <vTaskSuspendAll+0x18>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3301      	adds	r3, #1
 800262e:	4a03      	ldr	r2, [pc, #12]	@ (800263c <vTaskSuspendAll+0x18>)
 8002630:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	20000494 	.word	0x20000494

08002640 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800264e:	4b42      	ldr	r3, [pc, #264]	@ (8002758 <xTaskResumeAll+0x118>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10b      	bne.n	800266e <xTaskResumeAll+0x2e>
	__asm volatile
 8002656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800265a:	f383 8811 	msr	BASEPRI, r3
 800265e:	f3bf 8f6f 	isb	sy
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	603b      	str	r3, [r7, #0]
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	e7fd      	b.n	800266a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800266e:	f000 fc23 	bl	8002eb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002672:	4b39      	ldr	r3, [pc, #228]	@ (8002758 <xTaskResumeAll+0x118>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3b01      	subs	r3, #1
 8002678:	4a37      	ldr	r2, [pc, #220]	@ (8002758 <xTaskResumeAll+0x118>)
 800267a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800267c:	4b36      	ldr	r3, [pc, #216]	@ (8002758 <xTaskResumeAll+0x118>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d161      	bne.n	8002748 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002684:	4b35      	ldr	r3, [pc, #212]	@ (800275c <xTaskResumeAll+0x11c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d05d      	beq.n	8002748 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800268c:	e02e      	b.n	80026ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800268e:	4b34      	ldr	r3, [pc, #208]	@ (8002760 <xTaskResumeAll+0x120>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3318      	adds	r3, #24
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fcc9 	bl	8002032 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3304      	adds	r3, #4
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fcc4 	bl	8002032 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ae:	2201      	movs	r2, #1
 80026b0:	409a      	lsls	r2, r3
 80026b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002764 <xTaskResumeAll+0x124>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002764 <xTaskResumeAll+0x124>)
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4a27      	ldr	r2, [pc, #156]	@ (8002768 <xTaskResumeAll+0x128>)
 80026ca:	441a      	add	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3304      	adds	r3, #4
 80026d0:	4619      	mov	r1, r3
 80026d2:	4610      	mov	r0, r2
 80026d4:	f7ff fc50 	bl	8001f78 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026dc:	4b23      	ldr	r3, [pc, #140]	@ (800276c <xTaskResumeAll+0x12c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d302      	bcc.n	80026ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80026e6:	4b22      	ldr	r3, [pc, #136]	@ (8002770 <xTaskResumeAll+0x130>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002760 <xTaskResumeAll+0x120>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1cc      	bne.n	800268e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80026fa:	f000 fa29 	bl	8002b50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <xTaskResumeAll+0x134>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d010      	beq.n	800272c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800270a:	f000 f847 	bl	800279c <xTaskIncrementTick>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002714:	4b16      	ldr	r3, [pc, #88]	@ (8002770 <xTaskResumeAll+0x130>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3b01      	subs	r3, #1
 800271e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f1      	bne.n	800270a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002726:	4b13      	ldr	r3, [pc, #76]	@ (8002774 <xTaskResumeAll+0x134>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800272c:	4b10      	ldr	r3, [pc, #64]	@ (8002770 <xTaskResumeAll+0x130>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d009      	beq.n	8002748 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002734:	2301      	movs	r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002738:	4b0f      	ldr	r3, [pc, #60]	@ (8002778 <xTaskResumeAll+0x138>)
 800273a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002748:	f000 fbe8 	bl	8002f1c <vPortExitCritical>

	return xAlreadyYielded;
 800274c:	68bb      	ldr	r3, [r7, #8]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000494 	.word	0x20000494
 800275c:	2000046c 	.word	0x2000046c
 8002760:	2000042c 	.word	0x2000042c
 8002764:	20000474 	.word	0x20000474
 8002768:	20000370 	.word	0x20000370
 800276c:	2000036c 	.word	0x2000036c
 8002770:	20000480 	.word	0x20000480
 8002774:	2000047c 	.word	0x2000047c
 8002778:	e000ed04 	.word	0xe000ed04

0800277c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002782:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <xTaskGetTickCount+0x1c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002788:	687b      	ldr	r3, [r7, #4]
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000470 	.word	0x20000470

0800279c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027a6:	4b4f      	ldr	r3, [pc, #316]	@ (80028e4 <xTaskIncrementTick+0x148>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f040 808f 	bne.w	80028ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027b0:	4b4d      	ldr	r3, [pc, #308]	@ (80028e8 <xTaskIncrementTick+0x14c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3301      	adds	r3, #1
 80027b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80027b8:	4a4b      	ldr	r2, [pc, #300]	@ (80028e8 <xTaskIncrementTick+0x14c>)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d121      	bne.n	8002808 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80027c4:	4b49      	ldr	r3, [pc, #292]	@ (80028ec <xTaskIncrementTick+0x150>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80027ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	603b      	str	r3, [r7, #0]
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	e7fd      	b.n	80027e2 <xTaskIncrementTick+0x46>
 80027e6:	4b41      	ldr	r3, [pc, #260]	@ (80028ec <xTaskIncrementTick+0x150>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	4b40      	ldr	r3, [pc, #256]	@ (80028f0 <xTaskIncrementTick+0x154>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3e      	ldr	r2, [pc, #248]	@ (80028ec <xTaskIncrementTick+0x150>)
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	4a3e      	ldr	r2, [pc, #248]	@ (80028f0 <xTaskIncrementTick+0x154>)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b3e      	ldr	r3, [pc, #248]	@ (80028f4 <xTaskIncrementTick+0x158>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	3301      	adds	r3, #1
 8002800:	4a3c      	ldr	r2, [pc, #240]	@ (80028f4 <xTaskIncrementTick+0x158>)
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	f000 f9a4 	bl	8002b50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002808:	4b3b      	ldr	r3, [pc, #236]	@ (80028f8 <xTaskIncrementTick+0x15c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	429a      	cmp	r2, r3
 8002810:	d348      	bcc.n	80028a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002812:	4b36      	ldr	r3, [pc, #216]	@ (80028ec <xTaskIncrementTick+0x150>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d104      	bne.n	8002826 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800281c:	4b36      	ldr	r3, [pc, #216]	@ (80028f8 <xTaskIncrementTick+0x15c>)
 800281e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002822:	601a      	str	r2, [r3, #0]
					break;
 8002824:	e03e      	b.n	80028a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002826:	4b31      	ldr	r3, [pc, #196]	@ (80028ec <xTaskIncrementTick+0x150>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	d203      	bcs.n	8002846 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800283e:	4a2e      	ldr	r2, [pc, #184]	@ (80028f8 <xTaskIncrementTick+0x15c>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002844:	e02e      	b.n	80028a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	3304      	adds	r3, #4
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fbf1 	bl	8002032 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	3318      	adds	r3, #24
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fbe8 	bl	8002032 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002866:	2201      	movs	r2, #1
 8002868:	409a      	lsls	r2, r3
 800286a:	4b24      	ldr	r3, [pc, #144]	@ (80028fc <xTaskIncrementTick+0x160>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	4a22      	ldr	r2, [pc, #136]	@ (80028fc <xTaskIncrementTick+0x160>)
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4a1f      	ldr	r2, [pc, #124]	@ (8002900 <xTaskIncrementTick+0x164>)
 8002882:	441a      	add	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	3304      	adds	r3, #4
 8002888:	4619      	mov	r1, r3
 800288a:	4610      	mov	r0, r2
 800288c:	f7ff fb74 	bl	8001f78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002894:	4b1b      	ldr	r3, [pc, #108]	@ (8002904 <xTaskIncrementTick+0x168>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289a:	429a      	cmp	r2, r3
 800289c:	d3b9      	bcc.n	8002812 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800289e:	2301      	movs	r3, #1
 80028a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028a2:	e7b6      	b.n	8002812 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028a4:	4b17      	ldr	r3, [pc, #92]	@ (8002904 <xTaskIncrementTick+0x168>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028aa:	4915      	ldr	r1, [pc, #84]	@ (8002900 <xTaskIncrementTick+0x164>)
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d901      	bls.n	80028c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80028bc:	2301      	movs	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80028c0:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <xTaskIncrementTick+0x16c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80028c8:	2301      	movs	r3, #1
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	e004      	b.n	80028d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80028ce:	4b0f      	ldr	r3, [pc, #60]	@ (800290c <xTaskIncrementTick+0x170>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3301      	adds	r3, #1
 80028d4:	4a0d      	ldr	r2, [pc, #52]	@ (800290c <xTaskIncrementTick+0x170>)
 80028d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80028d8:	697b      	ldr	r3, [r7, #20]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000494 	.word	0x20000494
 80028e8:	20000470 	.word	0x20000470
 80028ec:	20000424 	.word	0x20000424
 80028f0:	20000428 	.word	0x20000428
 80028f4:	20000484 	.word	0x20000484
 80028f8:	2000048c 	.word	0x2000048c
 80028fc:	20000474 	.word	0x20000474
 8002900:	20000370 	.word	0x20000370
 8002904:	2000036c 	.word	0x2000036c
 8002908:	20000480 	.word	0x20000480
 800290c:	2000047c 	.word	0x2000047c

08002910 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002916:	4b2a      	ldr	r3, [pc, #168]	@ (80029c0 <vTaskSwitchContext+0xb0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800291e:	4b29      	ldr	r3, [pc, #164]	@ (80029c4 <vTaskSwitchContext+0xb4>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002924:	e045      	b.n	80029b2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8002926:	4b27      	ldr	r3, [pc, #156]	@ (80029c4 <vTaskSwitchContext+0xb4>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800292c:	4b26      	ldr	r3, [pc, #152]	@ (80029c8 <vTaskSwitchContext+0xb8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800293a:	7afb      	ldrb	r3, [r7, #11]
 800293c:	f1c3 031f 	rsb	r3, r3, #31
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	4922      	ldr	r1, [pc, #136]	@ (80029cc <vTaskSwitchContext+0xbc>)
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10b      	bne.n	800296e <vTaskSwitchContext+0x5e>
	__asm volatile
 8002956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	607b      	str	r3, [r7, #4]
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	e7fd      	b.n	800296a <vTaskSwitchContext+0x5a>
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4a14      	ldr	r2, [pc, #80]	@ (80029cc <vTaskSwitchContext+0xbc>)
 800297a:	4413      	add	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	3308      	adds	r3, #8
 8002990:	429a      	cmp	r2, r3
 8002992:	d104      	bne.n	800299e <vTaskSwitchContext+0x8e>
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	@ (80029d0 <vTaskSwitchContext+0xc0>)
 80029a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80029a8:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <vTaskSwitchContext+0xc0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	334c      	adds	r3, #76	@ 0x4c
 80029ae:	4a09      	ldr	r2, [pc, #36]	@ (80029d4 <vTaskSwitchContext+0xc4>)
 80029b0:	6013      	str	r3, [r2, #0]
}
 80029b2:	bf00      	nop
 80029b4:	371c      	adds	r7, #28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000494 	.word	0x20000494
 80029c4:	20000480 	.word	0x20000480
 80029c8:	20000474 	.word	0x20000474
 80029cc:	20000370 	.word	0x20000370
 80029d0:	2000036c 	.word	0x2000036c
 80029d4:	20000010 	.word	0x20000010

080029d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80029e0:	f000 f852 	bl	8002a88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029e4:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <prvIdleTask+0x28>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d9f9      	bls.n	80029e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80029ec:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <prvIdleTask+0x2c>)
 80029ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80029fc:	e7f0      	b.n	80029e0 <prvIdleTask+0x8>
 80029fe:	bf00      	nop
 8002a00:	20000370 	.word	0x20000370
 8002a04:	e000ed04 	.word	0xe000ed04

08002a08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	e00c      	b.n	8002a2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4a12      	ldr	r2, [pc, #72]	@ (8002a68 <prvInitialiseTaskLists+0x60>)
 8002a20:	4413      	add	r3, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fa7b 	bl	8001f1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	607b      	str	r3, [r7, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b06      	cmp	r3, #6
 8002a32:	d9ef      	bls.n	8002a14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002a34:	480d      	ldr	r0, [pc, #52]	@ (8002a6c <prvInitialiseTaskLists+0x64>)
 8002a36:	f7ff fa72 	bl	8001f1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002a3a:	480d      	ldr	r0, [pc, #52]	@ (8002a70 <prvInitialiseTaskLists+0x68>)
 8002a3c:	f7ff fa6f 	bl	8001f1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002a40:	480c      	ldr	r0, [pc, #48]	@ (8002a74 <prvInitialiseTaskLists+0x6c>)
 8002a42:	f7ff fa6c 	bl	8001f1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002a46:	480c      	ldr	r0, [pc, #48]	@ (8002a78 <prvInitialiseTaskLists+0x70>)
 8002a48:	f7ff fa69 	bl	8001f1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002a4c:	480b      	ldr	r0, [pc, #44]	@ (8002a7c <prvInitialiseTaskLists+0x74>)
 8002a4e:	f7ff fa66 	bl	8001f1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002a52:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <prvInitialiseTaskLists+0x78>)
 8002a54:	4a05      	ldr	r2, [pc, #20]	@ (8002a6c <prvInitialiseTaskLists+0x64>)
 8002a56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a58:	4b0a      	ldr	r3, [pc, #40]	@ (8002a84 <prvInitialiseTaskLists+0x7c>)
 8002a5a:	4a05      	ldr	r2, [pc, #20]	@ (8002a70 <prvInitialiseTaskLists+0x68>)
 8002a5c:	601a      	str	r2, [r3, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000370 	.word	0x20000370
 8002a6c:	200003fc 	.word	0x200003fc
 8002a70:	20000410 	.word	0x20000410
 8002a74:	2000042c 	.word	0x2000042c
 8002a78:	20000440 	.word	0x20000440
 8002a7c:	20000458 	.word	0x20000458
 8002a80:	20000424 	.word	0x20000424
 8002a84:	20000428 	.word	0x20000428

08002a88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a8e:	e019      	b.n	8002ac4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002a90:	f000 fa12 	bl	8002eb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a94:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <prvCheckTasksWaitingTermination+0x50>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fac6 	bl	8002032 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002adc <prvCheckTasksWaitingTermination+0x54>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	4a0b      	ldr	r2, [pc, #44]	@ (8002adc <prvCheckTasksWaitingTermination+0x54>)
 8002aae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <prvCheckTasksWaitingTermination+0x58>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <prvCheckTasksWaitingTermination+0x58>)
 8002ab8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002aba:	f000 fa2f 	bl	8002f1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f810 	bl	8002ae4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ac4:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <prvCheckTasksWaitingTermination+0x58>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1e1      	bne.n	8002a90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000440 	.word	0x20000440
 8002adc:	2000046c 	.word	0x2000046c
 8002ae0:	20000454 	.word	0x20000454

08002ae4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	334c      	adds	r3, #76	@ 0x4c
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fcb7 	bl	8003464 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d108      	bne.n	8002b12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fb85 	bl	8003214 <vPortFree>
				vPortFree( pxTCB );
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fb82 	bl	8003214 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002b10:	e019      	b.n	8002b46 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d103      	bne.n	8002b24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 fb79 	bl	8003214 <vPortFree>
	}
 8002b22:	e010      	b.n	8002b46 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d00b      	beq.n	8002b46 <prvDeleteTCB+0x62>
	__asm volatile
 8002b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b32:	f383 8811 	msr	BASEPRI, r3
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	60fb      	str	r3, [r7, #12]
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	e7fd      	b.n	8002b42 <prvDeleteTCB+0x5e>
	}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b56:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <prvResetNextTaskUnblockTime+0x38>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d104      	bne.n	8002b6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002b60:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <prvResetNextTaskUnblockTime+0x3c>)
 8002b62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002b68:	e008      	b.n	8002b7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b6a:	4b07      	ldr	r3, [pc, #28]	@ (8002b88 <prvResetNextTaskUnblockTime+0x38>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4a04      	ldr	r2, [pc, #16]	@ (8002b8c <prvResetNextTaskUnblockTime+0x3c>)
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	20000424 	.word	0x20000424
 8002b8c:	2000048c 	.word	0x2000048c

08002b90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002b9a:	4b29      	ldr	r3, [pc, #164]	@ (8002c40 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ba0:	4b28      	ldr	r3, [pc, #160]	@ (8002c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fa43 	bl	8002032 <uxListRemove>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10b      	bne.n	8002bca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002bb2:	4b24      	ldr	r3, [pc, #144]	@ (8002c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb8:	2201      	movs	r2, #1
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	4b21      	ldr	r3, [pc, #132]	@ (8002c48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	4a20      	ldr	r2, [pc, #128]	@ (8002c48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002bc8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bd0:	d10a      	bne.n	8002be8 <prvAddCurrentTaskToDelayedList+0x58>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d007      	beq.n	8002be8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	481a      	ldr	r0, [pc, #104]	@ (8002c4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8002be2:	f7ff f9c9 	bl	8001f78 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002be6:	e026      	b.n	8002c36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002bf0:	4b14      	ldr	r3, [pc, #80]	@ (8002c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d209      	bcs.n	8002c14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c00:	4b13      	ldr	r3, [pc, #76]	@ (8002c50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b0f      	ldr	r3, [pc, #60]	@ (8002c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	f7ff f9d7 	bl	8001fc0 <vListInsert>
}
 8002c12:	e010      	b.n	8002c36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c14:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b0a      	ldr	r3, [pc, #40]	@ (8002c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4610      	mov	r0, r2
 8002c22:	f7ff f9cd 	bl	8001fc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002c26:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d202      	bcs.n	8002c36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002c30:	4a09      	ldr	r2, [pc, #36]	@ (8002c58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	6013      	str	r3, [r2, #0]
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000470 	.word	0x20000470
 8002c44:	2000036c 	.word	0x2000036c
 8002c48:	20000474 	.word	0x20000474
 8002c4c:	20000458 	.word	0x20000458
 8002c50:	20000428 	.word	0x20000428
 8002c54:	20000424 	.word	0x20000424
 8002c58:	2000048c 	.word	0x2000048c

08002c5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3b04      	subs	r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3b04      	subs	r3, #4
 8002c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f023 0201 	bic.w	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3b04      	subs	r3, #4
 8002c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc0 <pxPortInitialiseStack+0x64>)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3b14      	subs	r3, #20
 8002c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3b04      	subs	r3, #4
 8002ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f06f 0202 	mvn.w	r2, #2
 8002caa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3b20      	subs	r3, #32
 8002cb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	08002cc5 	.word	0x08002cc5

08002cc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002cce:	4b13      	ldr	r3, [pc, #76]	@ (8002d1c <prvTaskExitError+0x58>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cd6:	d00b      	beq.n	8002cf0 <prvTaskExitError+0x2c>
	__asm volatile
 8002cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cdc:	f383 8811 	msr	BASEPRI, r3
 8002ce0:	f3bf 8f6f 	isb	sy
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	60fb      	str	r3, [r7, #12]
}
 8002cea:	bf00      	nop
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <prvTaskExitError+0x28>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	60bb      	str	r3, [r7, #8]
}
 8002d02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002d04:	bf00      	nop
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0fc      	beq.n	8002d06 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	2000000c 	.word	0x2000000c

08002d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002d20:	4b07      	ldr	r3, [pc, #28]	@ (8002d40 <pxCurrentTCBConst2>)
 8002d22:	6819      	ldr	r1, [r3, #0]
 8002d24:	6808      	ldr	r0, [r1, #0]
 8002d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d2a:	f380 8809 	msr	PSP, r0
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f04f 0000 	mov.w	r0, #0
 8002d36:	f380 8811 	msr	BASEPRI, r0
 8002d3a:	4770      	bx	lr
 8002d3c:	f3af 8000 	nop.w

08002d40 <pxCurrentTCBConst2>:
 8002d40:	2000036c 	.word	0x2000036c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop

08002d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002d48:	4808      	ldr	r0, [pc, #32]	@ (8002d6c <prvPortStartFirstTask+0x24>)
 8002d4a:	6800      	ldr	r0, [r0, #0]
 8002d4c:	6800      	ldr	r0, [r0, #0]
 8002d4e:	f380 8808 	msr	MSP, r0
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f380 8814 	msr	CONTROL, r0
 8002d5a:	b662      	cpsie	i
 8002d5c:	b661      	cpsie	f
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	df00      	svc	0
 8002d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002d6a:	bf00      	nop
 8002d6c:	e000ed08 	.word	0xe000ed08

08002d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d76:	4b47      	ldr	r3, [pc, #284]	@ (8002e94 <xPortStartScheduler+0x124>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a47      	ldr	r2, [pc, #284]	@ (8002e98 <xPortStartScheduler+0x128>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d10b      	bne.n	8002d98 <xPortStartScheduler+0x28>
	__asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	613b      	str	r3, [r7, #16]
}
 8002d92:	bf00      	nop
 8002d94:	bf00      	nop
 8002d96:	e7fd      	b.n	8002d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d98:	4b3e      	ldr	r3, [pc, #248]	@ (8002e94 <xPortStartScheduler+0x124>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8002e9c <xPortStartScheduler+0x12c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10b      	bne.n	8002dba <xPortStartScheduler+0x4a>
	__asm volatile
 8002da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	60fb      	str	r3, [r7, #12]
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	e7fd      	b.n	8002db6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002dba:	4b39      	ldr	r3, [pc, #228]	@ (8002ea0 <xPortStartScheduler+0x130>)
 8002dbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	22ff      	movs	r2, #255	@ 0xff
 8002dca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4b31      	ldr	r3, [pc, #196]	@ (8002ea4 <xPortStartScheduler+0x134>)
 8002de0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002de2:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <xPortStartScheduler+0x138>)
 8002de4:	2207      	movs	r2, #7
 8002de6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002de8:	e009      	b.n	8002dfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8002dea:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea8 <xPortStartScheduler+0x138>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea8 <xPortStartScheduler+0x138>)
 8002df2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e06:	2b80      	cmp	r3, #128	@ 0x80
 8002e08:	d0ef      	beq.n	8002dea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e0a:	4b27      	ldr	r3, [pc, #156]	@ (8002ea8 <xPortStartScheduler+0x138>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f1c3 0307 	rsb	r3, r3, #7
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d00b      	beq.n	8002e2e <xPortStartScheduler+0xbe>
	__asm volatile
 8002e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	60bb      	str	r3, [r7, #8]
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	e7fd      	b.n	8002e2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea8 <xPortStartScheduler+0x138>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea8 <xPortStartScheduler+0x138>)
 8002e36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <xPortStartScheduler+0x138>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e40:	4a19      	ldr	r2, [pc, #100]	@ (8002ea8 <xPortStartScheduler+0x138>)
 8002e42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002e4c:	4b17      	ldr	r3, [pc, #92]	@ (8002eac <xPortStartScheduler+0x13c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a16      	ldr	r2, [pc, #88]	@ (8002eac <xPortStartScheduler+0x13c>)
 8002e52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002e58:	4b14      	ldr	r3, [pc, #80]	@ (8002eac <xPortStartScheduler+0x13c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a13      	ldr	r2, [pc, #76]	@ (8002eac <xPortStartScheduler+0x13c>)
 8002e5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002e62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002e64:	f000 f8da 	bl	800301c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002e68:	4b11      	ldr	r3, [pc, #68]	@ (8002eb0 <xPortStartScheduler+0x140>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002e6e:	f000 f8f9 	bl	8003064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e72:	4b10      	ldr	r3, [pc, #64]	@ (8002eb4 <xPortStartScheduler+0x144>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a0f      	ldr	r2, [pc, #60]	@ (8002eb4 <xPortStartScheduler+0x144>)
 8002e78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002e7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002e7e:	f7ff ff63 	bl	8002d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002e82:	f7ff fd45 	bl	8002910 <vTaskSwitchContext>
	prvTaskExitError();
 8002e86:	f7ff ff1d 	bl	8002cc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	e000ed00 	.word	0xe000ed00
 8002e98:	410fc271 	.word	0x410fc271
 8002e9c:	410fc270 	.word	0x410fc270
 8002ea0:	e000e400 	.word	0xe000e400
 8002ea4:	20000498 	.word	0x20000498
 8002ea8:	2000049c 	.word	0x2000049c
 8002eac:	e000ed20 	.word	0xe000ed20
 8002eb0:	2000000c 	.word	0x2000000c
 8002eb4:	e000ef34 	.word	0xe000ef34

08002eb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8002ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	607b      	str	r3, [r7, #4]
}
 8002ed0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002ed2:	4b10      	ldr	r3, [pc, #64]	@ (8002f14 <vPortEnterCritical+0x5c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8002f14 <vPortEnterCritical+0x5c>)
 8002eda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002edc:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <vPortEnterCritical+0x5c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d110      	bne.n	8002f06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f18 <vPortEnterCritical+0x60>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00b      	beq.n	8002f06 <vPortEnterCritical+0x4e>
	__asm volatile
 8002eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef2:	f383 8811 	msr	BASEPRI, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	f3bf 8f4f 	dsb	sy
 8002efe:	603b      	str	r3, [r7, #0]
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	e7fd      	b.n	8002f02 <vPortEnterCritical+0x4a>
	}
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	2000000c 	.word	0x2000000c
 8002f18:	e000ed04 	.word	0xe000ed04

08002f1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002f22:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <vPortExitCritical+0x50>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <vPortExitCritical+0x26>
	__asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	607b      	str	r3, [r7, #4]
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	e7fd      	b.n	8002f3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002f42:	4b0a      	ldr	r3, [pc, #40]	@ (8002f6c <vPortExitCritical+0x50>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	4a08      	ldr	r2, [pc, #32]	@ (8002f6c <vPortExitCritical+0x50>)
 8002f4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002f4c:	4b07      	ldr	r3, [pc, #28]	@ (8002f6c <vPortExitCritical+0x50>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <vPortExitCritical+0x44>
 8002f54:	2300      	movs	r3, #0
 8002f56:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	2000000c 	.word	0x2000000c

08002f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f70:	f3ef 8009 	mrs	r0, PSP
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	4b15      	ldr	r3, [pc, #84]	@ (8002fd0 <pxCurrentTCBConst>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	f01e 0f10 	tst.w	lr, #16
 8002f80:	bf08      	it	eq
 8002f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f8a:	6010      	str	r0, [r2, #0]
 8002f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002f94:	f380 8811 	msr	BASEPRI, r0
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f7ff fcb6 	bl	8002910 <vTaskSwitchContext>
 8002fa4:	f04f 0000 	mov.w	r0, #0
 8002fa8:	f380 8811 	msr	BASEPRI, r0
 8002fac:	bc09      	pop	{r0, r3}
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	6808      	ldr	r0, [r1, #0]
 8002fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fb6:	f01e 0f10 	tst.w	lr, #16
 8002fba:	bf08      	it	eq
 8002fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002fc0:	f380 8809 	msr	PSP, r0
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	f3af 8000 	nop.w

08002fd0 <pxCurrentTCBConst>:
 8002fd0:	2000036c 	.word	0x2000036c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop

08002fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8002fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	607b      	str	r3, [r7, #4]
}
 8002ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002ff2:	f7ff fbd3 	bl	800279c <xTaskIncrementTick>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	@ (8003018 <SysTick_Handler+0x40>)
 8002ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	2300      	movs	r3, #0
 8003006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	f383 8811 	msr	BASEPRI, r3
}
 800300e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	e000ed04 	.word	0xe000ed04

0800301c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003020:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <vPortSetupTimerInterrupt+0x34>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003026:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <vPortSetupTimerInterrupt+0x38>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800302c:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <vPortSetupTimerInterrupt+0x3c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0a      	ldr	r2, [pc, #40]	@ (800305c <vPortSetupTimerInterrupt+0x40>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	099b      	lsrs	r3, r3, #6
 8003038:	4a09      	ldr	r2, [pc, #36]	@ (8003060 <vPortSetupTimerInterrupt+0x44>)
 800303a:	3b01      	subs	r3, #1
 800303c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800303e:	4b04      	ldr	r3, [pc, #16]	@ (8003050 <vPortSetupTimerInterrupt+0x34>)
 8003040:	2207      	movs	r2, #7
 8003042:	601a      	str	r2, [r3, #0]
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000e010 	.word	0xe000e010
 8003054:	e000e018 	.word	0xe000e018
 8003058:	20000000 	.word	0x20000000
 800305c:	10624dd3 	.word	0x10624dd3
 8003060:	e000e014 	.word	0xe000e014

08003064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003064:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003074 <vPortEnableVFP+0x10>
 8003068:	6801      	ldr	r1, [r0, #0]
 800306a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800306e:	6001      	str	r1, [r0, #0]
 8003070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003072:	bf00      	nop
 8003074:	e000ed88 	.word	0xe000ed88

08003078 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	@ 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003080:	2300      	movs	r3, #0
 8003082:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003084:	f7ff face 	bl	8002624 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003088:	4b5c      	ldr	r3, [pc, #368]	@ (80031fc <pvPortMalloc+0x184>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003090:	f000 f924 	bl	80032dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003094:	4b5a      	ldr	r3, [pc, #360]	@ (8003200 <pvPortMalloc+0x188>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	f040 8095 	bne.w	80031cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01e      	beq.n	80030e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80030a8:	2208      	movs	r2, #8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d015      	beq.n	80030e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f023 0307 	bic.w	r3, r3, #7
 80030c0:	3308      	adds	r3, #8
 80030c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <pvPortMalloc+0x6e>
	__asm volatile
 80030ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d2:	f383 8811 	msr	BASEPRI, r3
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	617b      	str	r3, [r7, #20]
}
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop
 80030e4:	e7fd      	b.n	80030e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d06f      	beq.n	80031cc <pvPortMalloc+0x154>
 80030ec:	4b45      	ldr	r3, [pc, #276]	@ (8003204 <pvPortMalloc+0x18c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d86a      	bhi.n	80031cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80030f6:	4b44      	ldr	r3, [pc, #272]	@ (8003208 <pvPortMalloc+0x190>)
 80030f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80030fa:	4b43      	ldr	r3, [pc, #268]	@ (8003208 <pvPortMalloc+0x190>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003100:	e004      	b.n	800310c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	429a      	cmp	r2, r3
 8003114:	d903      	bls.n	800311e <pvPortMalloc+0xa6>
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f1      	bne.n	8003102 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800311e:	4b37      	ldr	r3, [pc, #220]	@ (80031fc <pvPortMalloc+0x184>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003124:	429a      	cmp	r2, r3
 8003126:	d051      	beq.n	80031cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2208      	movs	r2, #8
 800312e:	4413      	add	r3, r2
 8003130:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	1ad2      	subs	r2, r2, r3
 8003142:	2308      	movs	r3, #8
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	429a      	cmp	r2, r3
 8003148:	d920      	bls.n	800318c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800314a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00b      	beq.n	8003174 <pvPortMalloc+0xfc>
	__asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	613b      	str	r3, [r7, #16]
}
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	e7fd      	b.n	8003170 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	1ad2      	subs	r2, r2, r3
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003186:	69b8      	ldr	r0, [r7, #24]
 8003188:	f000 f90a 	bl	80033a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800318c:	4b1d      	ldr	r3, [pc, #116]	@ (8003204 <pvPortMalloc+0x18c>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	4a1b      	ldr	r2, [pc, #108]	@ (8003204 <pvPortMalloc+0x18c>)
 8003198:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800319a:	4b1a      	ldr	r3, [pc, #104]	@ (8003204 <pvPortMalloc+0x18c>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b1b      	ldr	r3, [pc, #108]	@ (800320c <pvPortMalloc+0x194>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d203      	bcs.n	80031ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031a6:	4b17      	ldr	r3, [pc, #92]	@ (8003204 <pvPortMalloc+0x18c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a18      	ldr	r2, [pc, #96]	@ (800320c <pvPortMalloc+0x194>)
 80031ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	4b13      	ldr	r3, [pc, #76]	@ (8003200 <pvPortMalloc+0x188>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80031c2:	4b13      	ldr	r3, [pc, #76]	@ (8003210 <pvPortMalloc+0x198>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3301      	adds	r3, #1
 80031c8:	4a11      	ldr	r2, [pc, #68]	@ (8003210 <pvPortMalloc+0x198>)
 80031ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80031cc:	f7ff fa38 	bl	8002640 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <pvPortMalloc+0x17a>
	__asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	60fb      	str	r3, [r7, #12]
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	e7fd      	b.n	80031ee <pvPortMalloc+0x176>
	return pvReturn;
 80031f2:	69fb      	ldr	r3, [r7, #28]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3728      	adds	r7, #40	@ 0x28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	200040a8 	.word	0x200040a8
 8003200:	200040bc 	.word	0x200040bc
 8003204:	200040ac 	.word	0x200040ac
 8003208:	200040a0 	.word	0x200040a0
 800320c:	200040b0 	.word	0x200040b0
 8003210:	200040b4 	.word	0x200040b4

08003214 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d04f      	beq.n	80032c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003226:	2308      	movs	r3, #8
 8003228:	425b      	negs	r3, r3
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4413      	add	r3, r2
 800322e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	4b25      	ldr	r3, [pc, #148]	@ (80032d0 <vPortFree+0xbc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10b      	bne.n	800325a <vPortFree+0x46>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	60fb      	str	r3, [r7, #12]
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	e7fd      	b.n	8003256 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <vPortFree+0x66>
	__asm volatile
 8003262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	60bb      	str	r3, [r7, #8]
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	e7fd      	b.n	8003276 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	4b14      	ldr	r3, [pc, #80]	@ (80032d0 <vPortFree+0xbc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01e      	beq.n	80032c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d11a      	bne.n	80032c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	4b0e      	ldr	r3, [pc, #56]	@ (80032d0 <vPortFree+0xbc>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	43db      	mvns	r3, r3
 800329a:	401a      	ands	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80032a0:	f7ff f9c0 	bl	8002624 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	4b0a      	ldr	r3, [pc, #40]	@ (80032d4 <vPortFree+0xc0>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4413      	add	r3, r2
 80032ae:	4a09      	ldr	r2, [pc, #36]	@ (80032d4 <vPortFree+0xc0>)
 80032b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032b2:	6938      	ldr	r0, [r7, #16]
 80032b4:	f000 f874 	bl	80033a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80032b8:	4b07      	ldr	r3, [pc, #28]	@ (80032d8 <vPortFree+0xc4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	4a06      	ldr	r2, [pc, #24]	@ (80032d8 <vPortFree+0xc4>)
 80032c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80032c2:	f7ff f9bd 	bl	8002640 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80032c6:	bf00      	nop
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200040bc 	.word	0x200040bc
 80032d4:	200040ac 	.word	0x200040ac
 80032d8:	200040b8 	.word	0x200040b8

080032dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032e2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80032e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80032e8:	4b27      	ldr	r3, [pc, #156]	@ (8003388 <prvHeapInit+0xac>)
 80032ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00c      	beq.n	8003310 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3307      	adds	r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0307 	bic.w	r3, r3, #7
 8003302:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	4a1f      	ldr	r2, [pc, #124]	@ (8003388 <prvHeapInit+0xac>)
 800330c:	4413      	add	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003314:	4a1d      	ldr	r2, [pc, #116]	@ (800338c <prvHeapInit+0xb0>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800331a:	4b1c      	ldr	r3, [pc, #112]	@ (800338c <prvHeapInit+0xb0>)
 800331c:	2200      	movs	r2, #0
 800331e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	4413      	add	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003328:	2208      	movs	r2, #8
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0307 	bic.w	r3, r3, #7
 8003336:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a15      	ldr	r2, [pc, #84]	@ (8003390 <prvHeapInit+0xb4>)
 800333c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800333e:	4b14      	ldr	r3, [pc, #80]	@ (8003390 <prvHeapInit+0xb4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2200      	movs	r2, #0
 8003344:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003346:	4b12      	ldr	r3, [pc, #72]	@ (8003390 <prvHeapInit+0xb4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	1ad2      	subs	r2, r2, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800335c:	4b0c      	ldr	r3, [pc, #48]	@ (8003390 <prvHeapInit+0xb4>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a0a      	ldr	r2, [pc, #40]	@ (8003394 <prvHeapInit+0xb8>)
 800336a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4a09      	ldr	r2, [pc, #36]	@ (8003398 <prvHeapInit+0xbc>)
 8003372:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003374:	4b09      	ldr	r3, [pc, #36]	@ (800339c <prvHeapInit+0xc0>)
 8003376:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800337a:	601a      	str	r2, [r3, #0]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	200004a0 	.word	0x200004a0
 800338c:	200040a0 	.word	0x200040a0
 8003390:	200040a8 	.word	0x200040a8
 8003394:	200040b0 	.word	0x200040b0
 8003398:	200040ac 	.word	0x200040ac
 800339c:	200040bc 	.word	0x200040bc

080033a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033a8:	4b28      	ldr	r3, [pc, #160]	@ (800344c <prvInsertBlockIntoFreeList+0xac>)
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	e002      	b.n	80033b4 <prvInsertBlockIntoFreeList+0x14>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d8f7      	bhi.n	80033ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	4413      	add	r3, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d108      	bne.n	80033e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	441a      	add	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	441a      	add	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d118      	bne.n	8003428 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b15      	ldr	r3, [pc, #84]	@ (8003450 <prvInsertBlockIntoFreeList+0xb0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d00d      	beq.n	800341e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	441a      	add	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e008      	b.n	8003430 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800341e:	4b0c      	ldr	r3, [pc, #48]	@ (8003450 <prvInsertBlockIntoFreeList+0xb0>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	e003      	b.n	8003430 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	429a      	cmp	r2, r3
 8003436:	d002      	beq.n	800343e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	200040a0 	.word	0x200040a0
 8003450:	200040a8 	.word	0x200040a8

08003454 <memset>:
 8003454:	4402      	add	r2, r0
 8003456:	4603      	mov	r3, r0
 8003458:	4293      	cmp	r3, r2
 800345a:	d100      	bne.n	800345e <memset+0xa>
 800345c:	4770      	bx	lr
 800345e:	f803 1b01 	strb.w	r1, [r3], #1
 8003462:	e7f9      	b.n	8003458 <memset+0x4>

08003464 <_reclaim_reent>:
 8003464:	4b29      	ldr	r3, [pc, #164]	@ (800350c <_reclaim_reent+0xa8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4283      	cmp	r3, r0
 800346a:	b570      	push	{r4, r5, r6, lr}
 800346c:	4604      	mov	r4, r0
 800346e:	d04b      	beq.n	8003508 <_reclaim_reent+0xa4>
 8003470:	69c3      	ldr	r3, [r0, #28]
 8003472:	b1ab      	cbz	r3, 80034a0 <_reclaim_reent+0x3c>
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	b16b      	cbz	r3, 8003494 <_reclaim_reent+0x30>
 8003478:	2500      	movs	r5, #0
 800347a:	69e3      	ldr	r3, [r4, #28]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	5959      	ldr	r1, [r3, r5]
 8003480:	2900      	cmp	r1, #0
 8003482:	d13b      	bne.n	80034fc <_reclaim_reent+0x98>
 8003484:	3504      	adds	r5, #4
 8003486:	2d80      	cmp	r5, #128	@ 0x80
 8003488:	d1f7      	bne.n	800347a <_reclaim_reent+0x16>
 800348a:	69e3      	ldr	r3, [r4, #28]
 800348c:	4620      	mov	r0, r4
 800348e:	68d9      	ldr	r1, [r3, #12]
 8003490:	f000 f864 	bl	800355c <_free_r>
 8003494:	69e3      	ldr	r3, [r4, #28]
 8003496:	6819      	ldr	r1, [r3, #0]
 8003498:	b111      	cbz	r1, 80034a0 <_reclaim_reent+0x3c>
 800349a:	4620      	mov	r0, r4
 800349c:	f000 f85e 	bl	800355c <_free_r>
 80034a0:	6961      	ldr	r1, [r4, #20]
 80034a2:	b111      	cbz	r1, 80034aa <_reclaim_reent+0x46>
 80034a4:	4620      	mov	r0, r4
 80034a6:	f000 f859 	bl	800355c <_free_r>
 80034aa:	69e1      	ldr	r1, [r4, #28]
 80034ac:	b111      	cbz	r1, 80034b4 <_reclaim_reent+0x50>
 80034ae:	4620      	mov	r0, r4
 80034b0:	f000 f854 	bl	800355c <_free_r>
 80034b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80034b6:	b111      	cbz	r1, 80034be <_reclaim_reent+0x5a>
 80034b8:	4620      	mov	r0, r4
 80034ba:	f000 f84f 	bl	800355c <_free_r>
 80034be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034c0:	b111      	cbz	r1, 80034c8 <_reclaim_reent+0x64>
 80034c2:	4620      	mov	r0, r4
 80034c4:	f000 f84a 	bl	800355c <_free_r>
 80034c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80034ca:	b111      	cbz	r1, 80034d2 <_reclaim_reent+0x6e>
 80034cc:	4620      	mov	r0, r4
 80034ce:	f000 f845 	bl	800355c <_free_r>
 80034d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80034d4:	b111      	cbz	r1, 80034dc <_reclaim_reent+0x78>
 80034d6:	4620      	mov	r0, r4
 80034d8:	f000 f840 	bl	800355c <_free_r>
 80034dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80034de:	b111      	cbz	r1, 80034e6 <_reclaim_reent+0x82>
 80034e0:	4620      	mov	r0, r4
 80034e2:	f000 f83b 	bl	800355c <_free_r>
 80034e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80034e8:	b111      	cbz	r1, 80034f0 <_reclaim_reent+0x8c>
 80034ea:	4620      	mov	r0, r4
 80034ec:	f000 f836 	bl	800355c <_free_r>
 80034f0:	6a23      	ldr	r3, [r4, #32]
 80034f2:	b14b      	cbz	r3, 8003508 <_reclaim_reent+0xa4>
 80034f4:	4620      	mov	r0, r4
 80034f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80034fa:	4718      	bx	r3
 80034fc:	680e      	ldr	r6, [r1, #0]
 80034fe:	4620      	mov	r0, r4
 8003500:	f000 f82c 	bl	800355c <_free_r>
 8003504:	4631      	mov	r1, r6
 8003506:	e7bb      	b.n	8003480 <_reclaim_reent+0x1c>
 8003508:	bd70      	pop	{r4, r5, r6, pc}
 800350a:	bf00      	nop
 800350c:	20000010 	.word	0x20000010

08003510 <__libc_init_array>:
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	4d0d      	ldr	r5, [pc, #52]	@ (8003548 <__libc_init_array+0x38>)
 8003514:	4c0d      	ldr	r4, [pc, #52]	@ (800354c <__libc_init_array+0x3c>)
 8003516:	1b64      	subs	r4, r4, r5
 8003518:	10a4      	asrs	r4, r4, #2
 800351a:	2600      	movs	r6, #0
 800351c:	42a6      	cmp	r6, r4
 800351e:	d109      	bne.n	8003534 <__libc_init_array+0x24>
 8003520:	4d0b      	ldr	r5, [pc, #44]	@ (8003550 <__libc_init_array+0x40>)
 8003522:	4c0c      	ldr	r4, [pc, #48]	@ (8003554 <__libc_init_array+0x44>)
 8003524:	f000 f870 	bl	8003608 <_init>
 8003528:	1b64      	subs	r4, r4, r5
 800352a:	10a4      	asrs	r4, r4, #2
 800352c:	2600      	movs	r6, #0
 800352e:	42a6      	cmp	r6, r4
 8003530:	d105      	bne.n	800353e <__libc_init_array+0x2e>
 8003532:	bd70      	pop	{r4, r5, r6, pc}
 8003534:	f855 3b04 	ldr.w	r3, [r5], #4
 8003538:	4798      	blx	r3
 800353a:	3601      	adds	r6, #1
 800353c:	e7ee      	b.n	800351c <__libc_init_array+0xc>
 800353e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003542:	4798      	blx	r3
 8003544:	3601      	adds	r6, #1
 8003546:	e7f2      	b.n	800352e <__libc_init_array+0x1e>
 8003548:	080036a0 	.word	0x080036a0
 800354c:	080036a0 	.word	0x080036a0
 8003550:	080036a0 	.word	0x080036a0
 8003554:	080036a4 	.word	0x080036a4

08003558 <__retarget_lock_acquire_recursive>:
 8003558:	4770      	bx	lr

0800355a <__retarget_lock_release_recursive>:
 800355a:	4770      	bx	lr

0800355c <_free_r>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	4605      	mov	r5, r0
 8003560:	2900      	cmp	r1, #0
 8003562:	d041      	beq.n	80035e8 <_free_r+0x8c>
 8003564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003568:	1f0c      	subs	r4, r1, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	bfb8      	it	lt
 800356e:	18e4      	addlt	r4, r4, r3
 8003570:	f000 f83e 	bl	80035f0 <__malloc_lock>
 8003574:	4a1d      	ldr	r2, [pc, #116]	@ (80035ec <_free_r+0x90>)
 8003576:	6813      	ldr	r3, [r2, #0]
 8003578:	b933      	cbnz	r3, 8003588 <_free_r+0x2c>
 800357a:	6063      	str	r3, [r4, #4]
 800357c:	6014      	str	r4, [r2, #0]
 800357e:	4628      	mov	r0, r5
 8003580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003584:	f000 b83a 	b.w	80035fc <__malloc_unlock>
 8003588:	42a3      	cmp	r3, r4
 800358a:	d908      	bls.n	800359e <_free_r+0x42>
 800358c:	6820      	ldr	r0, [r4, #0]
 800358e:	1821      	adds	r1, r4, r0
 8003590:	428b      	cmp	r3, r1
 8003592:	bf01      	itttt	eq
 8003594:	6819      	ldreq	r1, [r3, #0]
 8003596:	685b      	ldreq	r3, [r3, #4]
 8003598:	1809      	addeq	r1, r1, r0
 800359a:	6021      	streq	r1, [r4, #0]
 800359c:	e7ed      	b.n	800357a <_free_r+0x1e>
 800359e:	461a      	mov	r2, r3
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	b10b      	cbz	r3, 80035a8 <_free_r+0x4c>
 80035a4:	42a3      	cmp	r3, r4
 80035a6:	d9fa      	bls.n	800359e <_free_r+0x42>
 80035a8:	6811      	ldr	r1, [r2, #0]
 80035aa:	1850      	adds	r0, r2, r1
 80035ac:	42a0      	cmp	r0, r4
 80035ae:	d10b      	bne.n	80035c8 <_free_r+0x6c>
 80035b0:	6820      	ldr	r0, [r4, #0]
 80035b2:	4401      	add	r1, r0
 80035b4:	1850      	adds	r0, r2, r1
 80035b6:	4283      	cmp	r3, r0
 80035b8:	6011      	str	r1, [r2, #0]
 80035ba:	d1e0      	bne.n	800357e <_free_r+0x22>
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	6053      	str	r3, [r2, #4]
 80035c2:	4408      	add	r0, r1
 80035c4:	6010      	str	r0, [r2, #0]
 80035c6:	e7da      	b.n	800357e <_free_r+0x22>
 80035c8:	d902      	bls.n	80035d0 <_free_r+0x74>
 80035ca:	230c      	movs	r3, #12
 80035cc:	602b      	str	r3, [r5, #0]
 80035ce:	e7d6      	b.n	800357e <_free_r+0x22>
 80035d0:	6820      	ldr	r0, [r4, #0]
 80035d2:	1821      	adds	r1, r4, r0
 80035d4:	428b      	cmp	r3, r1
 80035d6:	bf04      	itt	eq
 80035d8:	6819      	ldreq	r1, [r3, #0]
 80035da:	685b      	ldreq	r3, [r3, #4]
 80035dc:	6063      	str	r3, [r4, #4]
 80035de:	bf04      	itt	eq
 80035e0:	1809      	addeq	r1, r1, r0
 80035e2:	6021      	streq	r1, [r4, #0]
 80035e4:	6054      	str	r4, [r2, #4]
 80035e6:	e7ca      	b.n	800357e <_free_r+0x22>
 80035e8:	bd38      	pop	{r3, r4, r5, pc}
 80035ea:	bf00      	nop
 80035ec:	200041fc 	.word	0x200041fc

080035f0 <__malloc_lock>:
 80035f0:	4801      	ldr	r0, [pc, #4]	@ (80035f8 <__malloc_lock+0x8>)
 80035f2:	f7ff bfb1 	b.w	8003558 <__retarget_lock_acquire_recursive>
 80035f6:	bf00      	nop
 80035f8:	200041f8 	.word	0x200041f8

080035fc <__malloc_unlock>:
 80035fc:	4801      	ldr	r0, [pc, #4]	@ (8003604 <__malloc_unlock+0x8>)
 80035fe:	f7ff bfac 	b.w	800355a <__retarget_lock_release_recursive>
 8003602:	bf00      	nop
 8003604:	200041f8 	.word	0x200041f8

08003608 <_init>:
 8003608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360a:	bf00      	nop
 800360c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360e:	bc08      	pop	{r3}
 8003610:	469e      	mov	lr, r3
 8003612:	4770      	bx	lr

08003614 <_fini>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	bf00      	nop
 8003618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361a:	bc08      	pop	{r3}
 800361c:	469e      	mov	lr, r3
 800361e:	4770      	bx	lr
